#!/usr/bin/env python

Import("env")

import main_builders
import sys
import os

env.main_sources = []

env_main = env.Clone()

env_main.add_source_files(env.main_sources, "*.cpp")

if env["tests"]:
    env_main.Append(CPPDEFINES=["TESTS_ENABLED"])

env_main.Depends("#main/splash.gen.h", "#main/splash.png")
env_main.CommandNoCache(
    "#main/splash.gen.h",
    "#main/splash.png",
    env.Run(main_builders.make_splash, "Building splash screen header."),
)

env_main.Depends("#main/splash_editor.gen.h", "#main/splash_editor.png")
env_main.CommandNoCache(
    "#main/splash_editor.gen.h",
    "#main/splash_editor.png",
    env.Run(main_builders.make_splash_editor, "Building editor splash screen header."),
)

env_main.Depends("#main/app_icon.gen.h", "#main/app_icon.png")
env_main.CommandNoCache(
    "#main/app_icon.gen.h",
    "#main/app_icon.png",
    env.Run(main_builders.make_app_icon, "Building application icon."),
)

lib = env_main.add_library("main", env.main_sources)
env.Prepend(LIBS=[lib])

build_args = " ".join(sys.argv[1:])

SCONSFLAGS = os.environ.get("SCONSFLAGS")
if SCONSFLAGS:
    build_args = SCONSFLAGS + " " + build_args

with open("build_arguments.gen.h", "w") as fd:
    fd.write("/* THIS FILE IS GENERATED DO NOT EDIT */\n")
    fd.write("#ifndef BUILD_ARGUMENTS_GEN_H\n")
    fd.write("#define BUILD_ARGUMENTS_GEN_H\n")
    fd.write('#define BUILD_ARGUMENTS "' + build_args + '"\n')
    fd.write("#endif // BUILD_ARGUMENTS_GEN_H\n")
