#!/usr/bin/env python

Import('env')

env.editor_sources = []

import os
import os.path
from platform_methods import run_in_subprocess
from compat import open_utf8
import editor_builders


def _make_modules_doc_data(to_path, doc_pathmap):
    # NOTE: It is safe to generate this file here, since this is still executed serially
    g = open_utf8(os.path.join(to_path, "modules_doc_data.gen.h"), "w")
    g.write("static const int _modules_doc_data_class_path_count = " + str(len(doc_pathmap)) + ";\n")
    g.write("struct _DocDataClassPath { const char* name; const char* path; };\n")

    g.write("static const _DocDataClassPath _modules_doc_data_class_paths[" + str(len(doc_pathmap) + 1) + "] = {\n");
    
    for name, rel_path in sorted(doc_pathmap.items()):
        g.write("\t{\"" + name + "\", \"" + rel_path + "\"},\n")
    
    g.write("\t{NULL, NULL}\n")
    g.write("};\n")

    g.close()


if env['tools']:
    # Register exporters
    reg_exporters_inc = '#include "register_exporters.h"\n'
    reg_exporters = 'void register_exporters() {\n'
    for e in env.platform_exporters:
        env.add_source_files(env.editor_sources, "#platform/" + e + "/export/export.cpp")
        reg_exporters += '\tregister_' + e + '_exporter();\n'
        reg_exporters_inc += '#include "platform/' + e + '/export/export.h"\n'
    reg_exporters += '}\n'

    # NOTE: It is safe to generate this file here, since this is still executed serially
    with open_utf8("register_exporters.gen.cpp", "w") as f:
        f.write(reg_exporters_inc)
        f.write(reg_exporters)

    from glob import glob
    
    # API documentation
    basepath = env.Dir('#').abspath
    
    docs = []
    module_doc_pathmap = {}
    
    docs_glob = "*.xml"
    
    docs_path = os.path.join(basepath, "doc/classes", docs_glob)
    docs += glob(docs_path)
    
    for p in env.module_doc_paths:
        docs_path = os.path.join(basepath, p, docs_glob)
        module_docs = glob(docs_path)
        
        for f in module_docs:
            doc_class_name = os.path.basename(f).split('.')[0]
            module_doc_pathmap[doc_class_name] = p
        
        docs += module_docs
    
    _make_modules_doc_data(os.path.join(basepath, "editor/doc"), module_doc_pathmap)

    docs = sorted(docs)
    env.Depends("#editor/doc_data_compressed.gen.h", docs)
    env.CommandNoCache("#editor/doc_data_compressed.gen.h", docs, run_in_subprocess(editor_builders.make_doc_header))

    # Translations
    basepath = env.Dir('.').abspath
    tlist = glob(basepath + "/translations/*.po")
    env.Depends('#editor/translations.gen.h', tlist)
    env.CommandNoCache('#editor/translations.gen.h', tlist, run_in_subprocess(editor_builders.make_translations_header))

    # Fonts
    basepath = env.Dir('.').abspath
    flist = glob(basepath + "/../thirdparty/fonts/*.ttf")
    flist.extend(glob(basepath + "/../thirdparty/fonts/*.otf"))
    flist.sort()
    env.Depends('#editor/builtin_fonts.gen.h', flist)
    env.CommandNoCache('#editor/builtin_fonts.gen.h', flist, run_in_subprocess(editor_builders.make_fonts_header))

    env.add_source_files(env.editor_sources, "*.cpp")

    SConscript('collada/SCsub')
    SConscript('doc/SCsub')
    SConscript('fileserver/SCsub')
    SConscript('icons/SCsub')
    SConscript('import/SCsub')
    SConscript('plugins/SCsub')

    lib = env.add_library("editor", env.editor_sources)
    env.Prepend(LIBS=[lib])
