<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<!-- Engine -->

	<Type Name="Vector3">
		<DisplayString>{{{coord[0]},{coord[1]},{coord[2]}}}</DisplayString>
		<Expand>
			<Item Name="x">coord[0]</Item>
			<Item Name="y">coord[1]</Item>
			<Item Name="z">coord[2]</Item>
		</Expand>
	</Type>

	<Type Name="Vector2">
		<AlternativeType Name="Point2"/>
		<AlternativeType Name="Size2"/>
		<DisplayString>{{{coord[0]},{coord[1]}}}</DisplayString>
		<Expand>
			<Item Name="x">coord[0]</Item>
			<Item Name="y">coord[1]</Item>
		</Expand>
	</Type>

	<Type Name="Vector2i">
		<AlternativeType Name="Point2i"/>
		<AlternativeType Name="Size2i"/>
		<DisplayString>{{{x},{y}}}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
		</Expand>
	</Type>

	<Type Name="Quaternion">
		<DisplayString>{{{components[0]},{components[1]},{components[2]},{components[3]}}}</DisplayString>
		<Expand>
			<Item Name="x">components[0]</Item>
			<Item Name="y">components[1]</Item>
			<Item Name="z">components[2]</Item>
			<Item Name="w">components[3]</Item>
		</Expand>
	</Type>

	<Type Name="Color">
		<DisplayString>{{{components[0]},{components[1]},{components[2]},{components[3]}}}</DisplayString>
		<Expand>
			<Item Name="red">components[0]</Item>
			<Item Name="green">components[1]</Item>
			<Item Name="blue">components[2]</Item>
			<Item Name="alpha">components[3]</Item>
		</Expand>
	</Type>

	<Type Name="AABB">
		<DisplayString>{{{position},{size}}}</DisplayString>
		<Expand>
			<Item Name="position">position</Item>
			<Item Name="size">size</Item>
		</Expand>
	</Type>

	<Type Name="Transform2D">
		<DisplayString>{{{elements[0]},{elements[1]},{elements[2]}}}</DisplayString>
		<Expand>
			<Item Name="element0">elements[0]</Item>
			<Item Name="element1">elements[1]</Item>
			<Item Name="element2">elements[2]</Item>
		</Expand>
	</Type>

	<Type Name="Transform3D">
		<DisplayString>{{{basis},{origin}}}</DisplayString>
		<Expand>
			<Item Name="basis">basis</Item>
			<Item Name="origin">origin</Item>
		</Expand>
	</Type>

	<!-- Explicit types are used, since some NatVis implementations (VSCode :\) have problems interpreting typedefs -->
	<Type Name="Variant">
		<DisplayString Condition="type == Variant::NIL">nil</DisplayString>
		<DisplayString Condition="type == Variant::BOOL">{_data._bool}</DisplayString>
		<DisplayString Condition="type == Variant::INT">{_data._int}</DisplayString>
		<DisplayString Condition="type == Variant::FLOAT">{_data._float}</DisplayString>
		<DisplayString Condition="type == Variant::TRANSFORM2D">{_data._transform2d}</DisplayString>
		<DisplayString Condition="type == Variant::AABB">{_data._aabb}</DisplayString>
		<DisplayString Condition="type == Variant::BASIS">{_data._basis}</DisplayString>
		<DisplayString Condition="type == Variant::TRANSFORM3D">{_data._transform}</DisplayString>
		<DisplayString Condition="type == Variant::STRING">{*(String *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::VECTOR2">{*(Vector2 *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::RECT2">{*(Rect2 *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::VECTOR3">{*(Vector3 *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PLANE">{*(Plane *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::QUATERNION">{*(Quaternion *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::COLOR">{*(Color *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::NODE_PATH">{*(NodePath *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::RID">{*(::RID *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::OBJECT">{*(Object *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::DICTIONARY">{*(Dictionary *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::ARRAY">{*(Array *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_BYTE_ARRAY">{*(Vector&lt;unsigned char&gt; *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_INT32_ARRAY">{*(Vector&lt;int&gt; *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_INT64_ARRAY">{*(Vector&lt;long long&gt; *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_FLOAT32_ARRAY">{*(Vector&lt;float&gt; *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_FLOAT64_ARRAY">{*(Vector&lt;double&gt; *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_STRING_ARRAY">{*(Vector&lt;String&gt; *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_VECTOR2_ARRAY">{*(Vector&lt;Vector2&gt; *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_VECTOR3_ARRAY">{*(Vector&lt;Vector3&gt; *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_COLOR_ARRAY">{*(Vector&lt;Color&gt; *)_data._mem}</DisplayString>

		<StringView Condition="type == Variant::STRING &amp;&amp; ((String *)(_data._mem))-&gt;_cowdata._ptr">((String *)(_data._mem))-&gt;_cowdata._ptr,s32</StringView>

		<Expand>
			<Item Name="[value]" Condition="type == Variant::BOOL">_data._bool</Item>
			<Item Name="[value]" Condition="type == Variant::INT">_data._int</Item>
			<Item Name="[value]" Condition="type == Variant::FLOAT">_data._float</Item>
			<Item Name="[value]" Condition="type == Variant::TRANSFORM2D">_data._transform2d</Item>
			<Item Name="[value]" Condition="type == Variant::AABB">_data._aabb</Item>
			<Item Name="[value]" Condition="type == Variant::BASIS">_data._basis</Item>
			<Item Name="[value]" Condition="type == Variant::TRANSFORM3D">_data._transform</Item>
			<Item Name="[value]" Condition="type == Variant::STRING">*(String *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::VECTOR2">*(Vector2 *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::RECT2">*(Rect2 *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::VECTOR3">*(Vector3 *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PLANE">*(Plane *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::QUATERNION">*(Quaternion *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::COLOR">*(Color *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::NODE_PATH">*(NodePath *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::RID">*(::RID *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::OBJECT">*(Object *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::DICTIONARY">*(Dictionary *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::ARRAY">*(Array *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_BYTE_ARRAY">*(Vector&lt;unsigned char&gt; *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_INT32_ARRAY">*(Vector&lt;int&gt; *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_INT64_ARRAY">*(Vector&lt;long long&gt; *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_FLOAT32_ARRAY">*(Vector&lt;float&gt; *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_FLOAT64_ARRAY">*(Vector&lt;double&gt; *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_STRING_ARRAY">*(Vector&lt;String&gt; *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_VECTOR2_ARRAY">*(Vector&lt;Vector2&gt; *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_VECTOR3_ARRAY">*(Vector&lt;Vector3&gt; *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_COLOR_ARRAY">*(Vector&lt;Color&gt; *)_data._mem</Item>
		</Expand>
	</Type>

	<Type Name="Ref&lt;*&gt;">
		<DisplayString>{{{reference}}}</DisplayString>
		<Expand>
			<Item Name="reference">reference</Item>
		</Expand>
	</Type>

	<Type Name="Array">
		<DisplayString>{{size = {_p ? (((const unsigned int *)(_p -&gt;array._cowdata._ptr))[-1]) : 0}}}</DisplayString>
		<Expand>
			<Item Name="[size]">_p ? (((const unsigned int *)(_p -&gt;array._cowdata._ptr))[-1]) : 0</Item>
			<ArrayItems>
				<Size>_p ? (((const unsigned int *)(_p -&gt;array._cowdata._ptr))[-1]) : 0</Size>
				<ValuePointer>_p -&gt;array._cowdata._ptr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="Basis">
		<DisplayString>{{{elements[0]},{elements[1]},{elements[2]}}}</DisplayString>
		<Expand>
			<Item Name="x">elements[0]</Item>
			<Item Name="y">elements[1]</Item>
			<Item Name="z">elements[2]</Item>
		</Expand>
	</Type>

	<Type Name="CameraMatrix">
		<DisplayString>{{{matrix[0][0]},{matrix[0][1]},{matrix[0][2]},{matrix[0][3]},{matrix[1][0]},{matrix[1][1]},{matrix[1][2]},{matrix[1][3]},
		{matrix[2][0]},{matrix[2][1]},{matrix[2][2]},{matrix[2][3]},{matrix[3][0]},{matrix[3][1]},{matrix[3][2]},{matrix[3][3]}}}</DisplayString>
		<Expand>
			<Item Name="[0][0]">matrix[0][0]</Item>
			<Item Name="[0][1]">matrix[0][1]</Item>
			<Item Name="[0][2]">matrix[0][2]</Item>
			<Item Name="[0][3]">matrix[0][3]</Item>
			<Item Name="[1][0]">matrix[1][0]</Item>
			<Item Name="[1][1]">matrix[1][1]</Item>
			<Item Name="[1][2]">matrix[1][2]</Item>
			<Item Name="[1][3]">matrix[1][3]</Item>
			<Item Name="[2][0]">matrix[2][0]</Item>
			<Item Name="[2][1]">matrix[2][1]</Item>
			<Item Name="[2][2]">matrix[2][2]</Item>
			<Item Name="[2][3]">matrix[2][3]</Item>
			<Item Name="[3][0]">matrix[3][0]</Item>
			<Item Name="[3][1]">matrix[3][1]</Item>
			<Item Name="[3][2]">matrix[3][2]</Item>
			<Item Name="[3][3]">matrix[3][3]</Item>
		</Expand>
	</Type>

	<Type Name="String">
		<DisplayString Condition="_cowdata._ptr == 0">[empty]</DisplayString>
		<DisplayString Condition="_cowdata._ptr != 0">{_cowdata._ptr,s32}</DisplayString>
		<StringView Condition="_cowdata._ptr != 0">_cowdata._ptr,s32</StringView>
	</Type>

	<Type Name="StringName">
		<DisplayString Condition="_data &amp;&amp; _data->cname">{_data->cname}</DisplayString>
		<DisplayString Condition="_data &amp;&amp; !_data->cname">{_data->name,s32}</DisplayString>
		<DisplayString Condition="!_data">[empty]</DisplayString>
		<StringView Condition="_data &amp;&amp; _data->cname">_data->cname</StringView>
		<StringView Condition="_data &amp;&amp; !_data->cname">_data->name,s32</StringView>
	</Type>

	<!-- Getting readable string from NodePath is too complex even for natvis loops -->
	<Type Name="NodePath">
		<DisplayString>Can't visualize NodePath</DisplayString>
		<StringView>Can't visualize NodePath</StringView>
	</Type>

	<Type Name="Rect2">
		<DisplayString>{{{position},{size}}}</DisplayString>
		<Expand>
			<Item Name="position">position</Item>
			<Item Name="size">size</Item>
		</Expand>
	</Type>

	<Type Name="Rect2i">
		<DisplayString>{{{position},{size}}}</DisplayString>
		<Expand>
			<Item Name="position">position</Item>
			<Item Name="size">size</Item>
		</Expand>
	</Type>

	<Type Name="Plane">
		<DisplayString>{{{normal},{d}}}</DisplayString>
		<Expand>
			<Item Name="normal">normal</Item>
			<Item Name="d">d</Item>
		</Expand>
	</Type>

	<Type Name="RID">
		<DisplayString>{{{_id}}}</DisplayString>
		<Expand>
			<Item Name="id">_id</Item>
		</Expand>
	</Type>

	<Type Name="Node" Inheritable="false">
		<Expand>
			<Item Name="Object">(Object*)this</Item>
			<Item Name="class_name">(StringName*)(((char*)this) + sizeof(Object))</Item>
			<Item Name="data">(Node::Data*)(((char*)this) + sizeof(Object) + sizeof(StringName))</Item>
		</Expand>
	</Type>

	<Type Name="Pair&lt;*,*&gt;">
		<DisplayString>{{key = {first} value = {second}}}</DisplayString>
		<Expand>
			<Item Name="first">first</Item>
			<Item Name="second">second</Item>
		</Expand>
	</Type>

	<Type Name="Dictionary">
		<DisplayString>{{size = {_p-&gt;variant_map.list._data ? _p-&gt;variant_map.list._data-&gt;size_cache : 0}}}</DisplayString>
		<Expand>
			<LinkedListItems>
			  <Size>_p-&gt;variant_map.list._data ? _p-&gt;variant_map.list._data-&gt;size_cache : 0</Size>
			  <HeadPointer>_p-&gt;variant_map.list._data-&gt;first</HeadPointer>
			  <NextPointer>next_ptr</NextPointer>
			  <ValueNode>value</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<Type Name="Vector&lt;*&gt;">
		<Expand>
			<Item Name="size">_cowdata._ptr ? (((const unsigned int *)(_cowdata._ptr))[-1]) : 0</Item>
			<ArrayItems>
				<Size>_cowdata._ptr ? (((const unsigned int *)(_cowdata._ptr))[-1]) : 0</Size>
				<ValuePointer>_cowdata._ptr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="LocalVector&lt;*&gt;">
		<Expand>
			<Item Name="size">count</Item>
			<ArrayItems>
				<Size>count</Size>
				<ValuePointer>data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="List&lt;*&gt;">
		<Expand>
			<Item Name="size">_data ? (_data->size_cache) : 0</Item>
			<LinkedListItems>
				<Size>_data ? (_data->size_cache) : 0</Size>
				<HeadPointer>_data->first</HeadPointer>
				<NextPointer>next_ptr</NextPointer>
				<ValueNode>value</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>
</AutoVisualizer>
