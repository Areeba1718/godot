#!/usr/bin/env python

import subprocess

Import("env")

android_files = [
    "os_android.cpp",
    "android_input_handler.cpp",
    "file_access_android.cpp",
    "file_access_filesystem_jandroid.cpp",
    "audio_driver_oboe.cpp",
    "dir_access_jandroid.cpp",
    "tts_android.cpp",
    "thread_jandroid.cpp",
    "net_socket_android.cpp",
    "java_godot_lib_jni.cpp",
    "java_class_wrapper.cpp",
    "java_godot_wrapper.cpp",
    "java_godot_view_wrapper.cpp",
    "java_godot_io_wrapper.cpp",
    "jni_utils.cpp",
    "android_keys_utils.cpp",
    "display_server_android.cpp",
    "plugin/godot_plugin_jni.cpp",
    "rendering_context_driver_vulkan_android.cpp",
]

thirdparty_oboe_dir = "#thirdparty/oboe/"
thirdparty_oboe_sources = [
    "aaudio/AAudioLoader.cpp",
    "aaudio/AudioStreamAAudio.cpp",
    "common/AdpfWrapper.cpp",
    "common/AudioSourceCaller.cpp",
    "common/AudioStream.cpp",
    "common/AudioStreamBuilder.cpp",
    "common/DataConversionFlowGraph.cpp",
    "common/FilterAudioStream.cpp",
    "common/FixedBlockAdapter.cpp",
    "common/FixedBlockReader.cpp",
    "common/FixedBlockWriter.cpp",
    "common/LatencyTuner.cpp",
    "common/QuirksManager.cpp",
    "common/SourceFloatCaller.cpp",
    "common/SourceI16Caller.cpp",
    "common/SourceI24Caller.cpp",
    "common/SourceI32Caller.cpp",
    "common/Utilities.cpp",
    "common/Version.cpp",
    "fifo/FifoBuffer.cpp",
    "fifo/FifoController.cpp",
    "fifo/FifoControllerBase.cpp",
    "flowgraph/resampler/IntegerRatio.cpp",
    "flowgraph/resampler/LinearResampler.cpp",
    "flowgraph/resampler/MultiChannelResampler.cpp",
    "flowgraph/resampler/PolyphaseResampler.cpp",
    "flowgraph/resampler/PolyphaseResamplerMono.cpp",
    "flowgraph/resampler/PolyphaseResamplerStereo.cpp",
    "flowgraph/resampler/SincResampler.cpp",
    "flowgraph/resampler/SincResamplerStereo.cpp",
    "flowgraph/ChannelCountConverter.cpp",
    "flowgraph/FlowGraphNode.cpp",
    "flowgraph/MonoToMultiConverter.cpp",
    "flowgraph/MultiToMonoConverter.cpp",
    "flowgraph/SampleRateConverter.cpp",
    "flowgraph/SinkFloat.cpp",
    "flowgraph/SinkI16.cpp",
    "flowgraph/SinkI24.cpp",
    "flowgraph/SinkI32.cpp",
    "flowgraph/SourceFloat.cpp",
    "flowgraph/SourceI16.cpp",
    "flowgraph/SourceI24.cpp",
    "flowgraph/SourceI32.cpp",
    "opensles/AudioInputStreamOpenSLES.cpp",
    "opensles/AudioOutputStreamOpenSLES.cpp",
    "opensles/AudioStreamBuffered.cpp",
    "opensles/AudioStreamOpenSLES.cpp",
    "opensles/EngineOpenSLES.cpp",
    "opensles/OpenSLESUtilities.cpp",
    "opensles/OutputMixerOpenSLES.cpp",
]

thirdparty_oboe_sources = [thirdparty_oboe_dir + "src/" + file for file in thirdparty_oboe_sources]

env_android = env.Clone()

android_objects = []
for x in android_files:
    android_objects.append(env_android.SharedObject(x))

env_android.Prepend(CPPPATH=[thirdparty_oboe_dir + "include"])

env_thirdparty = env_android.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.Prepend(CPPPATH=[thirdparty_oboe_dir + "src"])

thirdparty_objs = [env_thirdparty.SharedObject("#thirdparty/misc/ifaddrs-android.cc")]
for x in thirdparty_oboe_sources:
    thirdparty_objs.append(env_thirdparty.SharedObject(x))

for x in thirdparty_objs:
    android_objects.append(x)

lib = env_android.add_shared_library("#bin/libgodot", [android_objects], SHLIBSUFFIX=env["SHLIBSUFFIX"])

for x in thirdparty_objs:
    # Needed to force rebuilding the platform files when the thirdparty code is updated.
    env.Depends(lib, x)

lib_arch_dir = ""
if env["arch"] == "arm32":
    lib_arch_dir = "armeabi-v7a"
elif env["arch"] == "arm64":
    lib_arch_dir = "arm64-v8a"
elif env["arch"] == "x86_32":
    lib_arch_dir = "x86"
elif env["arch"] == "x86_64":
    lib_arch_dir = "x86_64"
else:
    print("WARN: Architecture not suitable for embedding into APK; keeping .so at \\bin")

if lib_arch_dir != "":
    if env.dev_build:
        lib_type_dir = "dev"
    elif env.debug_features:
        if env.editor_build and env["store_release"]:
            lib_type_dir = "release"
        else:
            lib_type_dir = "debug"
    else:  # Release
        lib_type_dir = "release"

    if env.editor_build:
        lib_tools_dir = "tools/"
    else:
        lib_tools_dir = ""

    out_dir = "#platform/android/java/lib/libs/" + lib_tools_dir + lib_type_dir + "/" + lib_arch_dir
    env_android.Command(
        out_dir + "/libgodot_android.so", "#bin/libgodot" + env["SHLIBSUFFIX"], Move("$TARGET", "$SOURCE")
    )

    stl_lib_path = (
        str(env["ANDROID_NDK_ROOT"]) + "/sources/cxx-stl/llvm-libc++/libs/" + lib_arch_dir + "/libc++_shared.so"
    )
    env_android.Command(out_dir + "/libc++_shared.so", stl_lib_path, Copy("$TARGET", "$SOURCE"))

    def generate_apk(target, source, env):
        if env["target"] != "editor" and env["dev_build"]:
            subprocess.run(
                [
                    "./gradlew",
                    "generateDevTemplate",
                    "--quiet",
                ],
                cwd="platform/android/java",
            )
        else:
            # Android editor with `dev_build=yes` is handled by the `generateGodotEditor` task.
            subprocess.run(
                [
                    "./gradlew",
                    "generateGodotEditor" if env["target"] == "editor" else "generateGodotTemplates",
                    "--quiet",
                ],
                cwd="platform/android/java",
            )

    if env["generate_apk"]:
        generate_apk_command = env_android.Command("generate_apk", [], generate_apk)
        command = env_android.AlwaysBuild(generate_apk_command)
        env_android.Depends(command, [lib])
