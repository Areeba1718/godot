ext.versions = [
    androidGradlePlugin: '3.5.3',
    compileSdk         : 29,
    minSdk             : 18,
    targetSdk          : 29,
    buildTools         : '29.0.3',
    supportCoreUtils   : '28.0.0',
    kotlinVersion      : '1.3.61',
    v4Support          : '28.0.0'

]

ext.libraries = [
    androidGradlePlugin: "com.android.tools.build:gradle:$versions.androidGradlePlugin",
    supportCoreUtils   : "com.android.support:support-core-utils:$versions.supportCoreUtils",
    kotlinGradlePlugin : "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlinVersion",
    kotlinStdLib       : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlinVersion",
    v4Support          : "com.android.support:support-v4:$versions.v4Support"
]

ext.getExportPackageName = { ->
    // Retrieve the app id from the project property set by the Godot build command.
    String appId = project.hasProperty("export_package_name") ? project.property("export_package_name") : ""
    // Check if the app id is valid, otherwise use the default.
    if (appId == null || appId.isEmpty()) {
        appId = "com.godot.game"
    }
    return appId
}

/**
 * Parse the project properties for the 'custom_template_plugins_maven_repos' property and return the list
 * of maven repos.
 */
ext.getGodotPluginsMavenRepos = { ->
    String[] mavenRepos = []

    // Retrieve the list of maven repos.
    if (project.hasProperty("custom_template_plugins_maven_repos")) {
        String mavenReposProperty = project.property("custom_template_plugins_maven_repos")
        if (mavenReposProperty != null && !mavenReposProperty.trim().isEmpty()) {
            for (String mavenRepoUrl : mavenReposProperty.split(",")) {
                mavenRepos += mavenRepoUrl.trim()
            }
        }
    }

    return mavenRepos
}

/**
 * Parse the project properties for the 'custom_template_plugins_remote_binaries' property and return
 * it for inclusion in the build dependencies.
 */
ext.getGodotPluginsRemoteBinaries = { ->
    String[] remoteDeps = []

    // Retrieve the list of remote plugins binaries.
    if (project.hasProperty("custom_template_plugins_remote_binaries")) {
        String remoteDepsList = project.property("custom_template_plugins_remote_binaries")
        if (remoteDepsList != null && !remoteDepsList.trim().isEmpty()) {
            for (String dep: remoteDepsList.split(",")) {
                remoteDeps += dep.trim()
            }
        }
    }
    return remoteDeps
}

/**
 * Parse the project properties for the 'custom_template_plugins_local_binaries' property and return
 * their binaries for inclusion in the build dependencies.
 *
 * The listed plugins must have their binaries in the project plugins directory.
 */
ext.getGodotPluginsLocalBinaries = { ->
    String[] binDeps = []

    // Retrieve the list of local plugins binaries.
    if (project.hasProperty("custom_template_plugins_local_binaries")) {
        String pluginsList = project.property("custom_template_plugins_local_binaries")
        if (pluginsList != null && !pluginsList.trim().isEmpty()) {
            for (String plugin : pluginsList.split(",")) {
                binDeps += plugin.trim()
            }
        }
    }

    return binDeps
}

/**
 * Parse the project properties for the 'custom_template_plugins_local_dir' property and return
 * its value.
 *
 * The returned value is the directory containing user plugins local binaries.
 */
ext.getGodotPluginsLocalDirectory = { ->
    // The plugins directory is provided by the 'custom_template_plugins_local_dir' property.
    String pluginsDir = project.hasProperty("custom_template_plugins_local_dir")
        ? project.property("custom_template_plugins_local_dir")
        : ""

    return pluginsDir
}
