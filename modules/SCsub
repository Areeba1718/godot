#!/usr/bin/env python

<<<<<<< HEAD
import modules_builders
import os

Import("env")
=======
Import("env")

import os
>>>>>>> audio-bus-effect-fixed

env_modules = env.Clone()

Export("env_modules")

# Header with MODULE_*_ENABLED defines.
env.CommandNoCache(
    "modules_enabled.gen.h",
    Value(env.module_list),
    env.Run(
        modules_builders.generate_modules_enabled,
        "Generating enabled modules header.",
        # NOTE: No need to run in subprocess since this is still executed serially.
        subprocess=False,
    ),
)

# Header to be included in `tests/test_main.cpp` to run module-specific tests.
if env["tests"]:
    env.CommandNoCache(
        "modules_tests.gen.h",
        Value(env.module_list),
        env.Run(
            modules_builders.generate_modules_tests,
            "Generating modules tests header.",
            # NOTE: No need to run in subprocess since this is still executed serially.
            subprocess=False,
        ),
    )
    env.AlwaysBuild("modules_tests.gen.h")

<<<<<<< HEAD
vs_sources = []
# libmodule_<name>.a for each active module.
for name, path in env.module_list.items():
    env.modules_sources = []

=======
for name, path in env.module_list.items():
    if name in env.disabled_modules:
        continue

    env_modules.Append(CPPDEFINES=["MODULE_" + name.upper() + "_ENABLED"])
>>>>>>> audio-bus-effect-fixed
    if not os.path.isabs(path):
        SConscript(name + "/SCsub")  # Built-in.
    else:
        SConscript(path + "/SCsub")  # Custom.
<<<<<<< HEAD
=======

if env["split_libmodules"]:
    env.split_lib("modules", env_lib=env_modules)
else:
    lib = env_modules.add_library("modules", env.modules_sources)
>>>>>>> audio-bus-effect-fixed

    # Some modules are not linked automatically but can be enabled optionally
    # on iOS, so we handle those specially.
    if env["platform"] == "iphone" and name in ["arkit", "camera"]:
        continue

    lib = env_modules.add_library("module_%s" % name, env.modules_sources)
    env.Prepend(LIBS=[lib])
    if env["vsproj"]:
        vs_sources += env.modules_sources

# libmodules.a with only register_module_types.
# Must be last so that all libmodule_<name>.a libraries are on the right side
# in the linker command.
env.modules_sources = []
env_modules.add_source_files(env.modules_sources, "register_module_types.gen.cpp")
lib = env_modules.add_library("modules", env.modules_sources)
env.Prepend(LIBS=[lib])
if env["vsproj"]:
    env.modules_sources += vs_sources
