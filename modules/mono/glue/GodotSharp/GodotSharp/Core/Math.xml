<?xml version="1.0"?>
<doc>
    <members>
        <member name="Tau">
            <summary>
            The circle constant, the circumference of the unit circle in radians.
            </summary>
        </member>
        <member name="Pi">
            <summary>
            Constant that represents how many times the diameter of a circle
            fits around its perimeter. This is equivalent to <c>Mathf.Tau / 2</c>.
            </summary>
        </member>
        <member name="Inf">
            <summary>
            Positive infinity. For negative infinity, use <c>-Mathf.Inf</c>.
            </summary>
        </member>
        <member name="NaN">
            <summary>
            "Not a Number", an invalid value. <c>NaN</c> has special properties, including
            that it is not equal to itself. It is output by some invalid operations,
            such as dividing zero by zero.
            </summary>
        </member>
        <member name="Abs">
            <summary>
            Returns the absolute value of <paramref name="s"/> (i.e. positive value).
            </summary>
            <param name="s">The input number.</param>
            <returns>The absolute value of <paramref name="s"/>.</returns>
        </member>
        <member name="Acos">
            <summary>
            Returns the arc cosine of <paramref name="s"/> in radians.
            Use to get the angle of cosine <paramref name="s"/>.
            </summary>
            <param name="s">The input cosine value. Must be on the range of -1.0 to 1.0.</param>
            <returns>
            An angle that would result in the given cosine value. On the range <c>0</c> to <c>Tau/2</c>.
            </returns>
        </member>
        <member name="Asin">
            <summary>
            Returns the arc sine of <paramref name="s"/> in radians.
            Use to get the angle of sine <paramref name="s"/>.
            </summary>
            <param name="s">The input sine value. Must be on the range of -1.0 to 1.0.</param>
            <returns>
            An angle that would result in the given sine value. On the range <c>-Tau/4</c> to <c>Tau/4</c>.
            </returns>
        </member>
        <member name="Atan">
             <summary>
             Returns the arc tangent of <paramref name="s"/> in radians.
             Use to get the angle of tangent <paramref name="s"/>.

             The method cannot know in which quadrant the angle should fall.
             See <see cref="Atan2"/> if you have both <c>y</c> and <c>x</c>.
             </summary>
             <param name="s">The input tangent value.</param>
             <returns>
             An angle that would result in the given tangent value. On the range <c>-Tau/4</c> to <c>Tau/4</c>.
             </returns>
        </member>
        <member name="Atan2">
             <summary>
             Returns the arc tangent of <paramref name="y"/> and <paramref name="x"/> in radians.
             Use to get the angle of the tangent of <c>y/x</c>. To compute the value, the method takes into
             account the sign of both arguments in order to determine the quadrant.

             Important note: The Y coordinate comes first, by convention.
             </summary>
             <param name="y">The Y coordinate of the point to find the angle to.</param>
             <param name="x">The X coordinate of the point to find the angle to.</param>
             <returns>
             An angle that would result in the given tangent value. On the range <c>-Tau/2</c> to <c>Tau/2</c>.
             </returns>
        </member>
        <member name="Ceil">
            <summary>
            Rounds <paramref name="s"/> upward (towards positive infinity).
            </summary>
            <param name="s">The number to ceil.</param>
            <returns>The smallest whole number that is not less than <paramref name="s"/>.</returns>
        </member>
        <member name="Clamp">
            <summary>
            Clamps a <paramref name="value"/> so that it is not less than <paramref name="min"/>
            and not more than <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="Cos">
            <summary>
            Returns the cosine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The cosine of that angle.</returns>
        </member>
        <member name="Cosh">
            <summary>
            Returns the hyperbolic cosine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic cosine of that angle.</returns>
        </member>
        <member name="CubicInterpolate">
            <summary>
            Cubic interpolates between two values by the factor defined in <paramref name="weight"/>
            with pre and post values.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="CubicInterpolateAngle">
            <summary>
            Cubic interpolates between two rotation values with shortest path
            by the factor defined in <paramref name="weight"/> with pre and post values.
            See also <see cref="LerpAngle"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="CubicInterpolateInTime">
            <summary>
            Cubic interpolates between two values by the factor defined in <paramref name="weight"/>
            with pre and post values.
            It can perform smoother interpolation than <see cref="CubicInterpolate"/>
            by the time values.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="toT"></param>
            <param name="preT"></param>
            <param name="postT"></param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="CubicInterpolateAngleInTime">
            <summary>
            Cubic interpolates between two rotation values with shortest path
            by the factor defined in <paramref name="weight"/> with pre and post values.
            See also <see cref="LerpAngle"/>.
            It can perform smoother interpolation than <see cref="CubicInterpolateAngle"/>
            by the time values.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="toT"></param>
            <param name="preT"></param>
            <param name="postT"></param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="BezierInterpolate">
            <summary>
            Returns the point at the given <paramref name="t"/> on a one-dimensional Bezier curve defined by
            the given <paramref name="control1"/>, <paramref name="control2"/> and <paramref name="end"/> points.
            </summary>
            <param name="start">The start value for the interpolation.</param>
            <param name="control1">Control point that defines the bezier curve.</param>
            <param name="control2">Control point that defines the bezier curve.</param>
            <param name="end">The destination value for the interpolation.</param>
            <param name="t">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="DegToRad">
            <summary>
            Converts an angle expressed in degrees to radians.
            </summary>
            <param name="deg">An angle expressed in degrees.</param>
            <returns>The same angle expressed in radians.</returns>
        </member>
        <member name="Ease">
            <summary>
            Easing function, based on exponent. The <paramref name="curve"/> values are:
            <c>0</c> is constant, <c>1</c> is linear, <c>0</c> to <c>1</c> is ease-in, <c>1</c> or more is ease-out.
            Negative values are in-out/out-in.
            </summary>
            <param name="s">The value to ease.</param>
            <param name="curve">
            <c>0</c> is constant, <c>1</c> is linear, <c>0</c> to <c>1</c> is ease-in, <c>1</c> or more is ease-out.
            </param>
            <returns>The eased value.</returns>
        </member>
        <member name="Exp">
            <summary>
            The natural exponential function. It raises the mathematical
            constant <c>e</c> to the power of <paramref name="s"/> and returns it.
            </summary>
            <param name="s">The exponent to raise <c>e</c> to.</param>
            <returns><c>e</c> raised to the power of <paramref name="s"/>.</returns>
        </member>
        <member name="Floor">
            <summary>
            Rounds <paramref name="s"/> downward (towards negative infinity).
            </summary>
            <param name="s">The number to floor.</param>
            <returns>The largest whole number that is not more than <paramref name="s"/>.</returns>
        </member>
        <member name="InverseLerp">
            <summary>
            Returns a normalized value considering the given range.
            This is the opposite of <see cref="Lerp"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">The interpolated value.</param>
            <returns>
            The resulting value of the inverse interpolation.
            The returned value will be between 0.0 and 1.0 if <paramref name="weight"/> is
            between <paramref name="from"/> and <paramref name="to"/> (inclusive).
            </returns>
        </member>
        <member name="IsEqualApprox">
            <summary>
            Returns <see langword="true"/> if <paramref name="a"/> and <paramref name="b"/> are approximately equal
            to each other.
            The comparison is done using a tolerance calculation with <see cref="Epsilon"/>.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>A <see langword="bool"/> for whether or not the two values are approximately equal.</returns>
        </member>
        <member name="IsInf">
            <summary>
            Returns whether <paramref name="s"/> is an infinity value (either positive infinity or negative infinity).
            </summary>
            <param name="s">The value to check.</param>
            <returns>A <see langword="bool"/> for whether or not the value is an infinity value.</returns>
        </member>
        <member name="IsNaN">
            <summary>
            Returns whether <paramref name="s"/> is a <c>NaN</c> ("Not a Number" or invalid) value.
            </summary>
            <param name="s">The value to check.</param>
            <returns>A <see langword="bool"/> for whether or not the value is a <c>NaN</c> value.</returns>
        </member>
        <member name="IsZeroApprox">
             <summary>
             Returns <see langword="true"/> if <paramref name="s"/> is approximately zero.
             The comparison is done using a tolerance calculation with <see cref="Epsilon"/>.

             This method is faster than using <see cref="IsEqualApprox(real_t,real_t)"/> with one value as zero.
             </summary>
             <param name="s">The value to check.</param>
             <returns>A <see langword="bool"/> for whether or not the value is nearly zero.</returns>
        </member>
        <member name="Lerp">
            <summary>
            Linearly interpolates between two values by a normalized value.
            This is the opposite <see cref="InverseLerp"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="LerpAngle">
             <summary>
             Linearly interpolates between two angles (in radians) by a normalized value.

             Similar to <see cref="Lerp"/>,
             but interpolates correctly when the angles wrap around <see cref="Tau"/>.
             </summary>
             <param name="from">The start angle for interpolation.</param>
             <param name="to">The destination angle for interpolation.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting angle of the interpolation.</returns>
        </member>
        <member name="Log">
             <summary>
             Natural logarithm. The amount of time needed to reach a certain level of continuous growth.

             Note: This is not the same as the "log" function on most calculators, which uses a base 10 logarithm.
             </summary>
             <param name="s">The input value.</param>
             <returns>The natural log of <paramref name="s"/>.</returns>
        </member>
        <member name="Max">
            <summary>
            Returns the maximum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is higher.</returns>
        </member>
        <member name="Min">
            <summary>
            Returns the minimum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is lower.</returns>
        </member>
        <member name="MoveToward">
             <summary>
             Moves <paramref name="from"/> toward <paramref name="to"/> by the <paramref name="delta"/> value.

             Use a negative <paramref name="delta"/> value to move away.
             </summary>
             <param name="from">The start value.</param>
             <param name="to">The value to move towards.</param>
             <param name="delta">The amount to move by.</param>
             <returns>The value after moving.</returns>
        </member>
        <member name="NearestPo2">
            <summary>
            Returns the nearest larger power of 2 for the integer <paramref name="value"/>.
            </summary>
            <param name="value">The input value.</param>
            <returns>The nearest larger power of 2.</returns>
        </member>
        <member name="PosMod">
            <summary>
            Performs a canonical Modulus operation, where the output is on the range [0, <paramref name="b"/>).
            </summary>
            <param name="a">The dividend, the primary input.</param>
            <param name="b">The divisor. The output is on the range [0, <paramref name="b"/>).</param>
            <returns>The resulting output.</returns>
        </member>
        <member name="Pow">
            <summary>
            Returns the result of <paramref name="x"/> raised to the power of <paramref name="y"/>.
            </summary>
            <param name="x">The base.</param>
            <param name="y">The exponent.</param>
            <returns><paramref name="x"/> raised to the power of <paramref name="y"/>.</returns>
        </member>
        <member name="RadToDeg">
            <summary>
            Converts an angle expressed in radians to degrees.
            </summary>
            <param name="rad">An angle expressed in radians.</param>
            <returns>The same angle expressed in degrees.</returns>
        </member>
        <member name="Remap">
            <summary>
            Maps a <paramref name="value"/> from [<paramref name="inFrom"/>, <paramref name="inTo"/>]
            to [<paramref name="outFrom"/>, <paramref name="outTo"/>].
            </summary>
            <param name="value">The value to map.</param>
            <param name="inFrom">The start value for the input interpolation.</param>
            <param name="inTo">The destination value for the input interpolation.</param>
            <param name="outFrom">The start value for the output interpolation.</param>
            <param name="outTo">The destination value for the output interpolation.</param>
            <returns>The resulting mapped value mapped.</returns>
        </member>
        <member name="Round">
            <summary>
            Rounds <paramref name="s"/> to the nearest whole number,
            with halfway cases rounded towards the nearest multiple of two.
            </summary>
            <param name="s">The number to round.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="Sign">
            <summary>
            Returns the sign of <paramref name="s"/>: <c>-1</c> or <c>1</c>.
            Returns <c>0</c> if <paramref name="s"/> is <c>0</c>.
            </summary>
            <param name="s">The input number.</param>
            <returns>One of three possible values: <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="Sin">
            <summary>
            Returns the sine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The sine of that angle.</returns>
        </member>
        <member name="Sinh">
            <summary>
            Returns the hyperbolic sine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic sine of that angle.</returns>
        </member>
        <member name="SmoothStep">
            <summary>
            Returns a number smoothly interpolated between <paramref name="from"/> and <paramref name="to"/>,
            based on the <paramref name="weight"/>. Similar to <see cref="Lerp"/>,
            but interpolates faster at the beginning and slower at the end.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">A value representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="Sqrt">
             <summary>
             Returns the square root of <paramref name="s"/>, where <paramref name="s"/> is a non-negative number.

             If you need negative inputs, use <see cref="T:System.Numerics.Complex"/>.
             </summary>
             <param name="s">The input number. Must not be negative.</param>
             <returns>The square root of <paramref name="s"/>.</returns>
        </member>
        <member name="StepDecimals">
            <summary>
            Returns the position of the first non-zero digit, after the
            decimal point. Note that the maximum return value is 10,
            which is a design decision in the implementation.
            </summary>
            <param name="step">The input value.</param>
            <returns>The position of the first non-zero digit.</returns>
        </member>
        <member name="Snapped">
            <summary>
            Snaps float value <paramref name="s"/> to a given <paramref name="step"/>.
            This can also be used to round a floating point number to an arbitrary number of decimals.
            </summary>
            <param name="s">The value to snap.</param>
            <param name="step">The step size to snap to.</param>
            <returns>The snapped value.</returns>
        </member>
        <member name="Tan">
            <summary>
            Returns the tangent of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The tangent of that angle.</returns>
        </member>
        <member name="Tanh">
            <summary>
            Returns the hyperbolic tangent of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic tangent of that angle.</returns>
        </member>
        <member name="Wrap">
            <summary>
            Wraps <paramref name="value"/> between <paramref name="min"/> and <paramref name="max"/>.
            Usable for creating loop-alike behavior or infinite surfaces.
            If <paramref name="min"/> is <c>0</c>, this is equivalent
            to <see cref="PosMod"/>, so prefer using that instead.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The minimum allowed value and lower bound of the range.</param>
            <param name="max">The maximum allowed value and upper bound of the range.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="PingPong">
            <summary>
            Returns the <paramref name="value"/> wrapped between <c>0</c> and the <paramref name="length"/>.
            If the limit is reached, the next value the function returned is decreased to the <c>0</c> side
            or increased to the <paramref name="length"/> side (like a triangle wave).
            If <paramref name="length"/> is less than zero, it becomes positive.
            </summary>
            <param name="value">The value to pingpong.</param>
            <param name="length">The maximum value of the function.</param>
            <returns>The ping-ponged value.</returns>
        </member>
        <member name="E">
            <summary>
            The natural number <c>e</c>.
            </summary>
        </member>
        <member name="Sqrt2">
            <summary>
            The square root of 2.
            </summary>
        </member>
        <member name="Epsilon">
            <summary>
            A very small number used for float comparison with error tolerance.
            1e-06 with single-precision floats, but 1e-14 if <c>REAL_T_IS_DOUBLE</c>.
            </summary>
        </member>
        <member name="DecimalCount">
            <summary>
            Returns the amount of digits after the decimal place.
            </summary>
            <param name="s">The input value.</param>
            <returns>The amount of digits.</returns>
        </member>
        <member name="CeilToInt">
             <summary>
             Rounds <paramref name="s"/> upward (towards positive infinity).

             This is the same as <see cref="Ceil"/>, but returns an <see langword="int"/>.
             </summary>
             <param name="s">The number to ceil.</param>
             <returns>The smallest whole number that is not less than <paramref name="s"/>.</returns>
        </member>
        <member name="FloorToInt">
             <summary>
             Rounds <paramref name="s"/> downward (towards negative infinity).

             This is the same as <see cref="Floor"/>, but returns an <see langword="int"/>.
             </summary>
             <param name="s">The number to floor.</param>
             <returns>The largest whole number that is not more than <paramref name="s"/>.</returns>
        </member>
        <member name="RoundToInt">
             <summary>
             Rounds <paramref name="s"/> to the nearest whole number.

             This is the same as <see cref="Round"/>, but returns an <see langword="int"/>.
             </summary>
             <param name="s">The number to round.</param>
             <returns>The rounded number.</returns>
        </member>
        <member name="IsEqualApprox(real_t,real_t,real_t)">
            <summary>
            Returns <see langword="true"/> if <paramref name="a"/> and <paramref name="b"/> are approximately
            equal to each other.
            The comparison is done using the provided tolerance value.
            If you want the tolerance to be calculated for you, use <see cref="IsEqualApprox"/>.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <param name="tolerance">The pre-calculated tolerance value.</param>
            <returns>A <see langword="bool"/> for whether or not the two values are equal.</returns>
        </member>
    </members>
</doc>
