<?xml version="1.0" encoding="UTF-8" ?>
<class name="Timer" inherits="Node" category="Core" version="3.0-beta">
	<brief_description>
		A countdown timer.
	</brief_description>
	<description>
		Emit a signal at specified interval either once or repeatedly.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="get_time_left" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the timer's remaining time in seconds. Returns 0 if the timer is inactive.
			</description>
		</method>
		<method name="is_paused" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the timer is paused.
			</description>
		</method>
		<method name="is_stopped" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the timer is stopped.
			</description>
		</method>
		<method name="set_paused">
			<return type="void">
			</return>
			<argument index="0" name="paused" type="bool">
			</argument>
			<description>
				Pauses the timer. If [code]paused[/code] is [code]true[/code], the timer will not process until it is started or unpaused again, even if [method start] is called.
			</description>
		</method>
		<method name="start">
			<return type="void">
			</return>
			<description>
				Starts the timer. This also resets the remaining time to [code]wait_time[/code].
				Note: this method will not resume a paused timer. See [method set_paused].
			</description>
		</method>
		<method name="stop">
			<return type="void">
			</return>
			<description>
				Stop (cancel) the Timer.
			</description>
		</method>
	</methods>
	<members>
		<member name="autostart" type="bool" setter="set_autostart" getter="has_autostart">
			If [code]true[/code], Timer will automatically start when entering the scene tree. Default value: [code]false[/code].
		</member>
		<member name="repeat" type="bool" setter="set_repeat" getter="is_repeat">
			If [code]true[/code], Timer will restart when reaching 0. If [code]false[/code], Timer will stop. Default value: [code]true[/code].
		</member>
		<member name="process_mode" type="int" setter="set_timer_process_mode" getter="get_timer_process_mode" enum="Timer.TimerProcessMode">
			Processing mode. Uses TIMER_PROCESS_* constants as value.
		</member>
		<member name="time_interval" type="float" setter="set_time_interval" getter="get_time_interval">
			Timer interval in seconds.
		</member>
	</members>
	<signals>
		<signal name="timeout">
			<description>
				Emitted when the Timer reaches 0.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="TIMER_PROCESS_PHYSICS" value="0" enum="TimerProcessMode">
			Update the Timer during the physics step at each frame (fixed framerate processing).
		</constant>
		<constant name="TIMER_PROCESS_IDLE" value="1" enum="TimerProcessMode">
			Update the Timer during the idle time at each frame.
		</constant>
	</constants>
</class>
