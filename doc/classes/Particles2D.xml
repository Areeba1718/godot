<?xml version="1.0" encoding="UTF-8" ?>
<class name="Particles2D" inherits="Node2D" category="Core" version="3.1">
	<brief_description>
		2D particle emitter.
	</brief_description>
	<description>
		2D particle node used to create a variety of particle systems and effects. [code]Particles2D[/code] features an emitter that generates some number of particles at a given rate.
		Use the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="capture_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="restart">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="amount" type="int" setter="set_amount" getter="get_amount">
			Number of particles emitted in one emission cycle.
		</member>
		<member name="draw_order" type="int" setter="set_draw_order" getter="get_draw_order" enum="Particles2D.DrawOrder">
			Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code].
			This controls the order in which individual particles are drawn. Index means particles are drawn according to their emission order [code](default)[/code]. [code]Lifetime[/code] means they are drawn in order of remaining lifetime.
		</member>
		<member name="emitting" type="bool" setter="set_emitting" getter="is_emitting">
			If [code]true[/code] particles are being emitted. Default value: [code]true[/code].
		</member>
		<member name="explosiveness" type="float" setter="set_explosiveness_ratio" getter="get_explosiveness_ratio">
			How rapidly particles in an emission cycle are emitted. If greater than [code]0[/code], there will be a gap in emissions before the next cycle begins. Default value: [code]0[/code].
		</member>
		<member name="fixed_fps" type="int" setter="set_fixed_fps" getter="get_fixed_fps">
			This setting can be used to set the particle system to render at a fixed FPS. For instance, changing the value to [code]2[/code] will make the particles render at 2 frames per second. Note this does not slow down the particle system itself.
		</member>
		<member name="fract_delta" type="bool" setter="set_fractional_delta" getter="get_fractional_delta">
		</member>
		<member name="h_frames" type="int" setter="set_h_frames" getter="get_h_frames">
			Number of horizontal frames in [code]texture[/code].
		</member>
		<member name="lifetime" type="float" setter="set_lifetime" getter="get_lifetime">
			Amount of time in seconds each particle will exist. Default value: [code]1[/code].
			When lifetime ends, a new particle is created to replace it unless using [code]one_shot[/code].
		</member>
		<member name="local_coords" type="bool" setter="set_use_local_coordinates" getter="get_use_local_coordinates">
			If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code].
		</member>
		<member name="normal_map" type="Texture" setter="set_normal_map" getter="get_normal_map">
		</member>
		<member name="one_shot" type="bool" setter="set_one_shot" getter="get_one_shot">
			If [code]true[/code] only one emission cycle occurs. If set [code]true[/code] during a cycle, emission will stop at the cycle's end. Default value: [code]false[/code].
		</member>
		<member name="preprocess" type="float" setter="set_pre_process_time" getter="get_pre_process_time">
			Particle system starts as if it had already run for this many seconds.
		</member>
		<member name="process_material" type="Material" setter="set_process_material" getter="get_process_material">
			[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial].
		</member>
		<member name="randomness" type="float" setter="set_randomness_ratio" getter="get_randomness_ratio">
			Emission lifetime randomness ratio. Default value: [code]0[/code].
		</member>
		<member name="speed_scale" type="float" setter="set_speed_scale" getter="get_speed_scale">
			Particle system's running speed scaling ratio. Default value: [code]1[/code]. A value of [code]0[/code] can be used to pause the particles.
		</member>
		<member name="texture" type="Texture" setter="set_texture" getter="get_texture">
			Particle texture. If [code]null[/code] particles will be squares.
		</member>
		<member name="v_frames" type="int" setter="set_v_frames" getter="get_v_frames">
			Number of vertical frames in [code]texture[/code].
		</member>
		<member name="visibility_rect" type="Rect2" setter="set_visibility_rect" getter="get_visibility_rect">
			Visibility Helper
			The [code]W[/code] and [code]H[/code] values control width and height of the visibility rectangle.
			The [code]X[/code] and [code]Y[/code] values control the position of the upper-left corner of the visibility rectangle relative to the particle emitter.
			Example: To match a box particle shape of [code]x:100 y:200[/code]
			visibility_rect would be [code]w:100 h:200 X:-50 Y:-100[/code]
			If the [code]visibility_rect[/code] is not in view the particles will not be rendered.
			Tips: [code]visibility_rect[/code] can be automatically generated using the UI:
			[Particles > Generate Visibility Rect]
			Which appears on the toolbar when a [Particles2D] node is selected.
		</member>
	</members>
	<constants>
		<constant name="DRAW_ORDER_INDEX" value="0" enum="DrawOrder">
			Particles are drawn in the order emitted.
		</constant>
		<constant name="DRAW_ORDER_LIFETIME" value="1" enum="DrawOrder">
			Particles are drawn in order of remaining lifetime.
		</constant>
	</constants>
</class>
