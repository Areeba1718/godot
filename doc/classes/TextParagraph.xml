<?xml version="1.0" encoding="UTF-8" ?>
<class name="TextParagraph" inherits="RefCounted" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Holds a paragraph of text.
	</brief_description>
	<description>
		Abstraction over [TextServer] for handling paragraph of text.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_object">
			<return type="bool" />
			<param index="0" name="key" type="Variant" />
			<param index="1" name="size" type="Vector2" />
			<param index="2" name="inline_align" type="int" enum="InlineAlignment" default="5" />
			<param index="3" name="length" type="int" default="1" />
			<param index="4" name="baseline" type="float" default="0.0" />
			<description>
				Adds inline object to the text buffer, [param key] must be unique. In the text, object is represented as [param length] object replacement characters.
			</description>
		</method>
		<method name="add_string">
			<return type="bool" />
			<param index="0" name="text" type="String" />
			<param index="1" name="font" type="Font" />
			<param index="2" name="font_size" type="int" />
			<param index="3" name="language" type="String" default="&quot;&quot;" />
			<param index="4" name="meta" type="Variant" default="null" />
			<description>
				Adds text span and font to draw it.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Clears text paragraph (removes text and inline objects).
			</description>
		</method>
		<method name="clear_dropcap">
			<return type="void" />
			<description>
				Removes dropcap.
			</description>
		</method>
		<method name="draw" qualifiers="const">
			<return type="void" />
			<param index="0" name="canvas" type="RID" />
			<param index="1" name="pos" type="Vector2" />
			<param index="2" name="color" type="Color" default="Color(1, 1, 1, 1)" />
			<param index="3" name="dc_color" type="Color" default="Color(1, 1, 1, 1)" />
			<description>
				Draw all lines of the text and drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
			</description>
		</method>
		<method name="draw_custom" qualifiers="const">
			<return type="void" />
			<param index="0" name="canvas" type="RID" />
			<param index="1" name="pos" type="Vector2" />
			<param index="2" name="callback" type="Callable" />
			<description>
				Draw text using custom glyph drawing callback.
				The callback should have 4 arguments: [Dictionary] [code]glyph[/code], [Vector2] [code]position[/code], [RID] [code]canvas[/code], [int] [code]line_number[/code].
				The callback should return [bool], if [code]false[/code] is returned, drawing is aborted.
			</description>
		</method>
		<method name="draw_dropcap" qualifiers="const">
			<return type="void" />
			<param index="0" name="canvas" type="RID" />
			<param index="1" name="pos" type="Vector2" />
			<param index="2" name="color" type="Color" default="Color(1, 1, 1, 1)" />
			<description>
				Draw drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
			</description>
		</method>
		<method name="draw_dropcap_outline" qualifiers="const">
			<return type="void" />
			<param index="0" name="canvas" type="RID" />
			<param index="1" name="pos" type="Vector2" />
			<param index="2" name="outline_size" type="int" default="1" />
			<param index="3" name="color" type="Color" default="Color(1, 1, 1, 1)" />
			<description>
				Draw drop cap outline into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
			</description>
		</method>
		<method name="draw_line" qualifiers="const">
			<return type="void" />
			<param index="0" name="canvas" type="RID" />
			<param index="1" name="pos" type="Vector2" />
			<param index="2" name="line" type="int" />
			<param index="3" name="color" type="Color" default="Color(1, 1, 1, 1)" />
			<description>
				Draw single line of text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
			</description>
		</method>
		<method name="draw_line_outline" qualifiers="const">
			<return type="void" />
			<param index="0" name="canvas" type="RID" />
			<param index="1" name="pos" type="Vector2" />
			<param index="2" name="line" type="int" />
			<param index="3" name="outline_size" type="int" default="1" />
			<param index="4" name="color" type="Color" default="Color(1, 1, 1, 1)" />
			<description>
				Draw outline of the single line of text into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
			</description>
		</method>
		<method name="draw_outline" qualifiers="const">
			<return type="void" />
			<param index="0" name="canvas" type="RID" />
			<param index="1" name="pos" type="Vector2" />
			<param index="2" name="outline_size" type="int" default="1" />
			<param index="3" name="color" type="Color" default="Color(1, 1, 1, 1)" />
			<param index="4" name="dc_color" type="Color" default="Color(1, 1, 1, 1)" />
			<description>
				Draw outlines of all lines of the text and drop cap into a canvas item at a given position, with [param color]. [param pos] specifies the top left corner of the bounding box.
			</description>
		</method>
		<method name="draw_underline_custom" qualifiers="const">
			<return type="void" />
			<param index="0" name="canvas" type="RID" />
			<param index="1" name="pos" type="Vector2" />
			<param index="2" name="line_type" type="int" enum="TextServer.LinePosition" />
			<param index="3" name="start" type="int" />
			<param index="4" name="end" type="int" />
			<param index="5" name="callback" type="Callable" />
			<description>
				Draw underline/overline/strikethrough for the specific range of text using custom drawing callback.
				The callback should have 3 arguments: [Rect2] [code]rect[/code], [RID] [code]canvas[/code], [int] [code]line_number[/code].
				The callback should return [bool], if [code]false[/code] is returned, drawing is aborted.
			</description>
		</method>
		<method name="get_dropcap_lines" qualifiers="const">
			<return type="int" />
			<description>
				Returns number of lines used by dropcap.
			</description>
		</method>
		<method name="get_dropcap_offset" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns drawing offset of the dropcap.
			</description>
		</method>
		<method name="get_dropcap_rid" qualifiers="const">
			<return type="RID" />
			<description>
				Returns drop cap text buffer RID.
			</description>
		</method>
		<method name="get_dropcap_size" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns drop cap bounding box size.
			</description>
		</method>
		<method name="get_glyph_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns number of glyphs in the paragraph.
			</description>
		</method>
		<method name="get_line_ascent" qualifiers="const">
			<return type="float" />
			<param index="0" name="line" type="int" />
			<description>
				Returns the text line ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
			</description>
		</method>
		<method name="get_line_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns number of lines in the paragraph.
			</description>
		</method>
		<method name="get_line_descent" qualifiers="const">
			<return type="float" />
			<param index="0" name="line" type="int" />
			<description>
				Returns the text line descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
			</description>
		</method>
		<method name="get_line_object_rect" qualifiers="const">
			<return type="Rect2" />
			<param index="0" name="line" type="int" />
			<param index="1" name="key" type="Variant" />
			<description>
				Returns bounding rectangle of the inline object.
			</description>
		</method>
		<method name="get_line_objects" qualifiers="const">
			<return type="Array" />
			<param index="0" name="line" type="int" />
			<description>
				Returns array of inline objects in the line.
			</description>
		</method>
		<method name="get_line_offset" qualifiers="const">
			<return type="Vector2" />
			<param index="0" name="line" type="int" />
			<description>
				Returnes drawing offset of the text line.
			</description>
		</method>
		<method name="get_line_range" qualifiers="const">
			<return type="Vector2i" />
			<param index="0" name="line" type="int" />
			<description>
				Returns character range of the line.
			</description>
		</method>
		<method name="get_line_rid" qualifiers="const">
			<return type="RID" />
			<param index="0" name="line" type="int" />
			<description>
				Returns TextServer line buffer RID.
			</description>
		</method>
		<method name="get_line_size" qualifiers="const">
			<return type="Vector2" />
			<param index="0" name="line" type="int" />
			<description>
				Returns size of the bounding box of the line of text.
			</description>
		</method>
		<method name="get_line_underline_position" qualifiers="const">
			<return type="float" />
			<param index="0" name="line" type="int" />
			<description>
				Returns pixel offset of the underline below the baseline.
			</description>
		</method>
		<method name="get_line_underline_thickness" qualifiers="const">
			<return type="float" />
			<param index="0" name="line" type="int" />
			<description>
				Returns thickness of the underline.
			</description>
		</method>
		<method name="get_line_width" qualifiers="const">
			<return type="float" />
			<param index="0" name="line" type="int" />
			<description>
				Returns width (for horizontal layout) or height (for vertical) of the line of text.
			</description>
		</method>
		<method name="get_non_wrapped_size" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the size of the bounding box of the paragraph, without line breaks.
			</description>
		</method>
		<method name="get_rid" qualifiers="const">
			<return type="RID" />
			<description>
				Returns TextServer full string buffer RID.
			</description>
		</method>
		<method name="get_size" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the size of the bounding box of the paragraph.
			</description>
		</method>
		<method name="get_span_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns numbrer of text spans.
			</description>
		</method>
		<method name="get_visible_line_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns visible line count.
			</description>
		</method>
		<method name="has_invalid_glyphs" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if paragraph has glyphs that can't be rendered using current font.
			</description>
		</method>
		<method name="hit_test" qualifiers="const">
			<return type="int" />
			<param index="0" name="coords" type="Vector2" />
			<description>
				Returns caret character offset at the specified coordinates. This function always returns a valid position.
			</description>
		</method>
		<method name="resize_object">
			<return type="bool" />
			<param index="0" name="key" type="Variant" />
			<param index="1" name="size" type="Vector2" />
			<param index="2" name="inline_align" type="int" enum="InlineAlignment" default="5" />
			<param index="3" name="baseline" type="float" default="0.0" />
			<description>
				Sets new size and alignment of embedded object.
			</description>
		</method>
		<method name="set_bidi_override">
			<return type="void" />
			<param index="0" name="override" type="Array" />
			<description>
				Overrides BiDi for the structured text.
				Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.
			</description>
		</method>
		<method name="set_dropcap">
			<return type="bool" />
			<param index="0" name="text" type="String" />
			<param index="1" name="font" type="Font" />
			<param index="2" name="font_size" type="int" />
			<param index="3" name="dropcap_margins" type="Rect2" default="Rect2(0, 0, 0, 0)" />
			<param index="4" name="language" type="String" default="&quot;&quot;" />
			<description>
				Sets drop cap, overrides previously set drop cap. Drop cap (dropped capital) is a decorative element at the beginning of a paragraph that is larger than the rest of the text.
			</description>
		</method>
		<method name="tab_align">
			<return type="void" />
			<param index="0" name="tab_stops" type="PackedFloat32Array" />
			<description>
				Aligns paragraph to the given tab-stops.
			</description>
		</method>
		<method name="update_span_font">
			<return type="void" />
			<param index="0" name="span" type="int" />
			<param index="1" name="font" type="Font" />
			<param index="2" name="font_size" type="int" />
			<description>
				Sets font and font size of the text span (added by [method add_string]).
			</description>
		</method>
	</methods>
	<members>
		<member name="break_flags" type="int" setter="set_break_flags" getter="get_break_flags" enum="TextServer.LineBreakFlag" default="3">
			Line breaking rules. For more info see [TextServer].
		</member>
		<member name="clip" type="bool" setter="set_clip" getter="get_clip" default="true">
			If [code]true[/code], only shows the text that fits inside its bounding rectangle and will clip text.
		</member>
		<member name="custom_punctuation" type="String" setter="set_custom_punctuation" getter="get_custom_punctuation" default="&quot;&quot;">
			Custom punctuation character list, used for word breaking. If set to empty string, server defaults are used.
		</member>
		<member name="direction" type="int" setter="set_direction" getter="get_direction" enum="TextServer.Direction" default="0">
			Text writing direction.
		</member>
		<member name="extra_line_spacing" type="float" setter="set_extra_line_spacing" getter="get_extra_line_spacing" default="0.0">
			Extra line spacing.
		</member>
		<member name="height" type="float" setter="set_height" getter="get_height" default="-1.0">
			Target height for paragraph alignment.
		</member>
		<member name="horizontal_alignment" type="int" setter="set_horizontal_alignment" getter="get_horizontal_alignment" enum="HorizontalAlignment" default="0">
			Paragraph horizontal (alignment in the direction of text) alignment.
		</member>
		<member name="invert_line_order" type="bool" setter="set_invert_line_order" getter="get_invert_line_order" default="false">
			If [code]true[/code], line drawing order is inverted.
		</member>
		<member name="justification_flags" type="int" setter="set_justification_flags" getter="get_justification_flags" enum="TextServer.JustificationFlag" default="3">
			Line alignment rules. For more info see [TextServer].
		</member>
		<member name="lines_skipped" type="int" setter="set_lines_skipped" getter="get_lines_skipped" default="0">
			Number of lines to skip.
		</member>
		<member name="max_lines_visible" type="int" setter="set_max_lines_visible" getter="get_max_lines_visible" default="-1">
			Limits the lines of text shown.
		</member>
		<member name="orientation" type="int" setter="set_orientation" getter="get_orientation" enum="TextServer.Orientation" default="0">
			Text orientation.
		</member>
		<member name="preserve_control" type="bool" setter="set_preserve_control" getter="get_preserve_control" default="false">
			If set to [code]true[/code] text will display control characters.
		</member>
		<member name="preserve_invalid" type="bool" setter="set_preserve_invalid" getter="get_preserve_invalid" default="true">
			If set to [code]true[/code] text will display invalid characters.
		</member>
		<member name="text_overrun_behavior" type="int" setter="set_text_overrun_behavior" getter="get_text_overrun_behavior" enum="TextServer.OverrunBehavior" default="0">
			Sets the clipping behavior when the text exceeds the paragraph's set width. See [enum TextServer.OverrunBehavior] for a description of all modes.
		</member>
		<member name="uniform_line_height" type="bool" setter="set_uniform_line_height" getter="get_uniform_line_height" default="false">
			If [code]true[/code], heigth of every line is set to the maximum line height.
		</member>
		<member name="vertical_alignment" type="int" setter="set_vertical_alignment" getter="get_vertical_alignment" enum="VerticalAlignment" default="0">
			Paragraph vertical (alignment in the direction of lines) alignment.
		</member>
		<member name="width" type="float" setter="set_width" getter="get_width" default="-1.0">
			Target width for paragraph alignment.
		</member>
	</members>
</class>
