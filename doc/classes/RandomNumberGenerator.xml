<?xml version="1.0" encoding="UTF-8" ?>
<class name="RandomNumberGenerator" inherits="Reference" version="4.0">
	<brief_description>
		A class for generating pseudo-random numbers.
	</brief_description>
	<description>
		RandomNumberGenerator is a class for generating pseudo-random numbers. It currently uses [url=http://www.pcg-random.org/]PCG32[/url].
		[b]Note:[/b] The underlying algorithm is an implementation detail. As a result, it should not be depended upon for reproducible random streams across Godot versions.
		To generate a random float number (within a given range) based on a time-dependant seed:
		[codeblock]
		var rng = RandomNumberGenerator.new()
		func _ready():
		    rng.randomize()
		    var my_random_number = rng.randf_range(-10.0, 10.0)
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="randf">
			<return type="float">
			</return>
			<description>
				Generates a pseudo-random float between [code]0.0[/code] and [code]1.0[/code] (inclusive).
			</description>
		</method>
		<method name="randf_range">
			<return type="float">
			</return>
			<argument index="0" name="from" type="float">
			</argument>
			<argument index="1" name="to" type="float">
			</argument>
			<description>
				Generates a pseudo-random float between [code]from[/code] and [code]to[/code] (inclusive).
			</description>
		</method>
		<method name="randfn">
			<return type="float">
			</return>
			<argument index="0" name="mean" type="float" default="0.0">
			</argument>
			<argument index="1" name="deviation" type="float" default="1.0">
			</argument>
			<description>
				Generates a [url=https://en.wikipedia.org/wiki/Normal_distribution]normally-distributed[/url] pseudo-random number, using Box-Muller transform with the specified [code]mean[/code] and a standard [code]deviation[/code]. This is also called Gaussian distribution.
			</description>
		</method>
		<method name="randi">
			<return type="int">
			</return>
			<description>
				Generates a pseudo-random 32-bit unsigned integer between [code]0[/code] and [code]4294967295[/code] (inclusive).
			</description>
		</method>
		<method name="randi_range">
			<return type="int">
			</return>
			<argument index="0" name="from" type="int">
			</argument>
			<argument index="1" name="to" type="int">
			</argument>
			<description>
				Generates a pseudo-random 32-bit signed integer between [code]from[/code] and [code]to[/code] (inclusive).
			</description>
		</method>
		<method name="randomize">
			<return type="void">
			</return>
			<description>
				Setups a time-based seed to generator.
			</description>
		</method>
		<method name="seed">
			<return type="void">
			</return>
			<argument index="0" name="seed" type="int">
			</argument>
			<description>
				Initializes the random number generator state based on the given seed value. A given seed will give a reproducible sequence of pseudo-random numbers.
			</description>
		</method>
	</methods>
	<members>
		<member name="last_seed" type="int" setter="set_last_seed" getter="get_last_seed" default="-6398989897141750821">
			The last value that was used to seed the generator.
			This property is for bookkeeping only; setting it does not affect the behavior of the generator.
		</member>
		<member name="state" type="int" setter="set_state" getter="get_state" default="-6332740101472756719">
			The current state of the random number generator. Save and restore this property to restore the generator to a previous state.
			[b]Note:[/b] Do not set state to arbitrary values, since the random number generator requires the state to have certain qualities to behave properly. It should only be set to values that came from the state property itself. To initialize the random number generator with arbitrary input, use [method seed] instead.
		</member>
	</members>
	<constants>
	</constants>
</class>
