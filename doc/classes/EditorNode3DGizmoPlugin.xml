<?xml version="1.0" encoding="UTF-8" ?>
<class name="EditorNode3DGizmoPlugin" inherits="Resource" version="4.0">
	<brief_description>
		Used by the editor to define Node3D gizmo types.
	</brief_description>
	<description>
		EditorNode3DGizmoPlugin allows you to define a new type of Gizmo. There are two main ways to do so: extending [EditorNode3DGizmoPlugin] for the simpler gizmos, or creating a new [EditorNode3DGizmo] type. See the tutorial in the documentation for more info.
	</description>
	<tutorials>
		<link title="Spatial gizmo plugins">https://docs.godotengine.org/en/latest/tutorials/plugins/editor/spatial_gizmos.html</link>
	</tutorials>
	<methods>
		<method name="_can_be_hidden" qualifiers="virtual">
			<return type="bool">
			</return>
			<description>
				Override this method to define whether the gizmos handled by this plugin can be hidden or not. Returns [code]true[/code] if not overridden.
			</description>
		</method>
		<method name="_commit_handle" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="gizmo" type="EditorNode3DGizmo">
			</argument>
			<argument index="1" name="group_id" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<argument index="3" name="restore" type="Variant">
			</argument>
			<argument index="4" name="cancel" type="bool" default="false">
			</argument>
			<description>
				Override this method to commit a handle being edited (handles must have been previously added by [method EditorNode3DGizmo.add_handle_group] during [method _redraw]). This usually means creating an [UndoRedo] action for the change, using the current handle value as "do" and the [code]restore[/code] argument as "undo".
				If the [code]cancel[/code] argument is [code]true[/code], the [code]restore[/code] value should be directly set, without any [UndoRedo] action. Called for this plugin's active gizmos.
			</description>
		</method>
		<method name="_commit_transform_handle" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="gizmo" type="EditorNode3DGizmo">
			</argument>
			<argument index="1" name="group_id" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<argument index="3" name="restore" type="Transform3D">
			</argument>
			<argument index="4" name="cancel" type="bool" default="false">
			</argument>
			<description>
				Override this method to commit a transform handle being edited (handles must have been previously added by [method EditorNode3DGizmo.add_transform_handle_group] during [method _redraw]). This usually means creating an [UndoRedo] action for the change, using the current handle value as "do" and the [code]restore[/code] argument as "undo".
				If the [code]cancel[/code] argument is [code]true[/code], the [code]restore[/code] value should be directly set, without any [UndoRedo] action. Called for this plugin's active gizmos.
			</description>
		</method>
		<method name="_create_gizmo" qualifiers="virtual">
			<return type="EditorNode3DGizmo">
			</return>
			<argument index="0" name="spatial" type="Node3D">
			</argument>
			<description>
				Override this method to return a custom [EditorNode3DGizmo] for the spatial nodes of your choice, return [code]null[/code] for the rest of nodes. See also [method _has_gizmo].
			</description>
		</method>
		<method name="_get_gizmo_name" qualifiers="virtual">
			<return type="String">
			</return>
			<description>
				Override this method to provide the name that will appear in the gizmo visibility menu.
			</description>
		</method>
		<method name="_get_handle_name" qualifiers="virtual">
			<return type="String">
			</return>
			<argument index="0" name="gizmo" type="EditorNode3DGizmo">
			</argument>
			<argument index="1" name="group_id" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
				Override this method to provide gizmo's handle names. Called for this plugin's active gizmos.
			</description>
		</method>
		<method name="_get_handle_value" qualifiers="virtual">
			<return type="Variant">
			</return>
			<argument index="0" name="gizmo" type="EditorNode3DGizmo">
			</argument>
			<argument index="1" name="group_id" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
				Override this method to return the actual value of a handle. This value will be requested at the start of an edit and used as the [code]restore[/code] argument in [method _commit_handle]. Called for this plugin's active gizmos.
			</description>
		</method>
		<method name="_get_priority" qualifiers="virtual">
			<return type="int">
			</return>
			<description>
				Override this method to set the gizmo's priority, since a [Node3D] can only have one gizmo. Higher values correspond to higher priority. If a gizmo with higher priority conflicts with another gizmo, only the gizmo with higher priority will be used.
				All built-in editor gizmos return a priority of [code]-1[/code]. If not overridden, this method will return [code]0[/code], which means custom gizmos will automatically override built-in gizmos.
			</description>
		</method>
		<method name="_get_transform_handle_value" qualifiers="virtual">
			<return type="Transform3D">
			</return>
			<argument index="0" name="gizmo" type="EditorNode3DGizmo">
			</argument>
			<argument index="1" name="group_id" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
				Override this method to return the actual value of a transform handle. This value will be used to update the 3D transform gizmo. It will also be requested at the start of an edit and used as the [code]restore[/code] argument in [method _commit_handle]. Called for this plugin's active gizmos.
			</description>
		</method>
		<method name="_has_gizmo" qualifiers="virtual">
			<return type="bool">
			</return>
			<argument index="0" name="spatial" type="Node3D">
			</argument>
			<description>
				Override this method to define which Node3D nodes have a gizmo from this plugin. Whenever a [Node3D] node is added to a scene this method is called, if it returns [code]true[/code] the node gets a generic [EditorNode3DGizmo] assigned and is added to this plugin's list of active gizmos.
			</description>
		</method>
		<method name="_is_handle_highlighted" qualifiers="virtual">
			<return type="bool">
			</return>
			<argument index="0" name="gizmo" type="EditorNode3DGizmo">
			</argument>
			<argument index="1" name="group_id" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
				Override this method to return [code]true[/code] whenever to given handle should be highlighted in the editor. Called for this plugin's active gizmos.
			</description>
		</method>
		<method name="_is_selectable_when_hidden" qualifiers="virtual">
			<return type="bool">
			</return>
			<description>
				Override this method to define whether Node3D with this gizmo should be selectable even when the gizmo is hidden.
			</description>
		</method>
		<method name="_redraw" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="gizmo" type="EditorNode3DGizmo">
			</argument>
			<description>
				Override this method to add all the gizmo elements whenever a gizmo update is requested. Called for this plugin's active gizmos.
			</description>
		</method>
		<method name="_set_handle" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="gizmo" type="EditorNode3DGizmo">
			</argument>
			<argument index="1" name="group_id" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<argument index="3" name="camera" type="Camera3D">
			</argument>
			<argument index="4" name="point" type="Vector2">
			</argument>
			<description>
				Override this method to update the node properties when the user drags a gizmo handle (previously added with [method EditorNode3DGizmo.add_handle_group]). The provided [code]point[/code] is the mouse position in screen coordinates and the [code]camera[/code] can be used to convert it to raycasts. Called for this plugin's active gizmos.
			</description>
		</method>
		<method name="_set_transform_handle" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="gizmo" type="EditorNode3DGizmo">
			</argument>
			<argument index="1" name="group_id" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<argument index="3" name="transform" type="Transform3D">
			</argument>
			<description>
				Override this method to update the node properties when the user manipulates a transform handle (previously added with [method EditorNode3DGizmo.add_transform_handle_group]).  Called for this plugin's active gizmos.
			</description>
		</method>
		<method name="add_material">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="material" type="StandardMaterial3D">
			</argument>
			<description>
				Adds a new material to the internal material list for the plugin. It can then be accessed with [method get_material]. Should not be overridden.
			</description>
		</method>
		<method name="create_handle_material">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="billboard" type="bool" default="false">
			</argument>
			<argument index="2" name="texture" type="Texture2D" default="null">
			</argument>
			<description>
				Creates a handle material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with [method get_material] and used in [method EditorNode3DGizmo.add_handles]. Should not be overridden.
				You can optionally provide a texture to use instead of the default icon.
			</description>
		</method>
		<method name="create_icon_material">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="texture" type="Texture2D">
			</argument>
			<argument index="2" name="on_top" type="bool" default="false">
			</argument>
			<argument index="3" name="color" type="Color" default="Color(1, 1, 1, 1)">
			</argument>
			<description>
				Creates an icon material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with [method get_material] and used in [method EditorNode3DGizmo.add_unscaled_billboard]. Should not be overridden.
			</description>
		</method>
		<method name="create_material">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<argument index="2" name="billboard" type="bool" default="false">
			</argument>
			<argument index="3" name="on_top" type="bool" default="false">
			</argument>
			<argument index="4" name="use_vertex_color" type="bool" default="false">
			</argument>
			<description>
				Creates an unshaded material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with [method get_material] and used in [method EditorNode3DGizmo.add_mesh] and [method EditorNode3DGizmo.add_lines]. Should not be overridden.
			</description>
		</method>
		<method name="get_material">
			<return type="StandardMaterial3D">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="gizmo" type="EditorNode3DGizmo" default="null">
			</argument>
			<description>
				Gets material from the internal list of materials. If an [EditorNode3DGizmo] is provided, it will try to get the corresponding variant (selected and/or editable).
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
