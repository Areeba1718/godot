<?xml version="1.0" encoding="UTF-8" ?>
<class name="PrimitiveMesh" inherits="Mesh" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.
	</brief_description>
	<description>
		Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh. Examples include [BoxMesh], [CapsuleMesh], [CylinderMesh], [PlaneMesh], [PrismMesh], [QuadMesh], and [SphereMesh].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_create_mesh_array" qualifiers="virtual const">
			<return type="Array" />
			<description>
			</description>
		</method>
		<method name="get_mesh_arrays" qualifiers="const">
			<return type="Array" />
			<description>
				Returns mesh arrays used to constitute surface of [Mesh]. The result can be passed to [method ArrayMesh.add_surface_from_arrays] to create a new surface. For example:
				[codeblocks]
				[gdscript]
				var c = CylinderMesh.new()
				var arr_mesh = ArrayMesh.new()
				arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, c.get_mesh_arrays())
				[/gdscript]
				[csharp]
				var c = new CylinderMesh();
				var arrMesh = new ArrayMesh();
				arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, c.GetMeshArrays());
				[/csharp]
				[/codeblocks]
			</description>
		</method>
	</methods>
	<members>
		<member name="custom_aabb" type="AABB" setter="set_custom_aabb" getter="get_custom_aabb">
			Overrides the [AABB] with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices.
		</member>
		<member name="flip_faces" type="bool" setter="set_flip_faces" getter="get_flip_faces">
			If set, the order of the vertices in each triangle are reversed resulting in the backside of the mesh being drawn.
			This gives the same result as using [constant BaseMaterial3D.CULL_FRONT] in [member BaseMaterial3D.cull_mode].
		</member>
		<member name="material" type="Material" setter="set_material" getter="get_material">
			The current [Material] of the primitive mesh.
		</member>
		<member name="vertex_color" type="Color" setter="set_vertex_color" getter="get_vertex_color">
			The vertex color to use for all of the primitive's points. This can reduce the need to use multiple materials when using the same mesh several times. You will still need to make the mesh resource unique for the vertex color to be editable individually from other instances, but the material will no longer need to be made unique. This can improve performance thanks to materials being reused more often.
			[b]Note:[/b] This vertex color is only visible if the mesh's [BaseMaterial3D] has [member BaseMaterial3D.vertex_color_use_as_albedo] set to [code]true[/code]. If the mesh is using a custom [ShaderMaterial], the shader will have to make use of [code]COLOR[/code] in [code]vertex()[/code] for [member vertex_color] to have any effect.
			[b]Note:[/b] Setting [member vertex_color] will cause the mesh to be regenerated, which can be relatively slow if the mesh has hundreds of triangles or more. Avoid changing [member vertex_color] every frame, except for simple cases such as quads or boxes or low-detail cylinders/spheres.
			[b]Note:[/b] Vertex colors are clamped between [code]Color(0, 0, 0)[/code] and [code]Color(1, 1, 1)[/code]. This means HDR colors cannot be stored in the mesh itself.
		</member>
	</members>
</class>
