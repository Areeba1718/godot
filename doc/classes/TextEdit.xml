<?xml version="1.0" encoding="UTF-8" ?>
<class name="TextEdit" inherits="Control" category="Core" version="3.2">
	<brief_description>
		Multiline text editing control.
	</brief_description>
	<description>
		TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_color_region">
			<return type="void">
			</return>
			<argument index="0" name="begin_key" type="String">
			</argument>
			<argument index="1" name="end_key" type="String">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<argument index="3" name="line_only" type="bool" default="false">
			</argument>
			<description>
				Adds a color region (given the delimiters) and its colors.
			</description>
		</method>
		<method name="add_keyword_color">
			<return type="void">
			</return>
			<argument index="0" name="keyword" type="String">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
				Add a [code]keyword[/code] and its [Color].
			</description>
		</method>
		<method name="add_member_keyword">
			<return type="void">
			</return>
			<argument index="0" name="member" type="String">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
				Adds a member keyword and its color.
			</description>
		</method>
		<method name="backspace_at_cursor">
			<return type="void">
			</return>
			<description>
				Acts as if backspace was pressed.
			</description>
		</method>
		<method name="can_fold" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns if the given line is foldable, that is, it has indented lines right below it.
			</description>
		</method>
		<method name="center_viewport_to_cursor">
			<return type="void">
			</return>
			<description>
				Centers the viewport to the cursor.
			</description>
		</method>
		<method name="clear">
			<return type="void">
			</return>
			<description>
				Clears this [TextEdit] content.
			</description>
		</method>
		<method name="clear_colors">
			<return type="void">
			</return>
			<description>
				Clears all the syntax coloring information.
			</description>
		</method>
		<method name="clear_executing_line">
			<return type="void">
			</return>
			<description>
				Clears the executing line set with.
			</description>
		</method>
		<method name="clear_info_icons">
			<return type="void">
			</return>
			<description>
				Clears all the info icons added with [method add_info_icons].
			</description>
		</method>
		<method name="clear_member_keywords">
			<return type="void">
			</return>
			<description>
				Clears all the member keywords added with [method add_member_keyword].
			</description>
		</method>
		<method name="clear_undo_history">
			<return type="void">
			</return>
			<description>
				Clears the undo history.
			</description>
		</method>
		<method name="code_complete">
			<return type="void">
			</return>
			<argument index="0" name="strings" type="PoolStringArray">
			</argument>
			<argument index="1" name="forced" type="bool" default="false">
			</argument>
			<description>
				Shows the code completion popup with the list of [code]strings[/code] if the list contains part of the word being completed or it's preceded by any of the completion prefixes set with [method set_completion]. If [code]forced[/code] is true, the code completion popup will show always.
			</description>
		</method>
		<method name="copy">
			<return type="void">
			</return>
			<description>
				Copies the current text selection.
			</description>
		</method>
		<method name="cursor_get_column" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the column the editing cursor is at.
			</description>
		</method>
		<method name="cursor_get_line" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the line the editing cursor is at.
			</description>
		</method>
		<method name="cursor_set_column">
			<return type="void">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="adjust_viewport" type="bool" default="true">
			</argument>
			<description>
				Moves the cursor at the specified [code]column[/code] index.
				If [code]adjust_viewport[/code] is set to true, the viewport will center at the cursor position after the move occurs. Default value is [code]true[/code].
			</description>
		</method>
		<method name="cursor_set_line">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<argument index="1" name="adjust_viewport" type="bool" default="true">
			</argument>
			<argument index="2" name="can_be_hidden" type="bool" default="true">
			</argument>
			<argument index="3" name="wrap_index" type="int" default="0">
			</argument>
			<description>
				Moves the cursor at the specified [code]line[/code] index.
				If [code]adjust_viewport[/code] is set to true, the viewport will center at the cursor position after the move occurs. Default value is [code]true[/code].
				If [code]can_be_hidden[/code] is set to true, the specified [code]line[/code] can be hidden using [member set_line_as_hidden]. Default value is [code]true[/code].
			</description>
		</method>
		<method name="cut">
			<return type="void">
			</return>
			<description>
				Cuts the current selection.
			</description>
		</method>
		<method name="deselect">
			<return type="void">
			</return>
			<description>
				Deselects the current selection.
			</description>
		</method>
		<method name="fold_all_lines">
			<return type="void">
			</return>
			<description>
				Folds all lines that are possible to be folded (see [method can_fold]).
			</description>
		</method>
		<method name="fold_line">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Folds the given line, if possible (see [method can_fold]).
			</description>
		</method>
		<method name="get_bookmark_gutter_width" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Gets the bookmark's gutter width.
			</description>
		</method>
		<method name="get_bookmarks" qualifiers="const">
			<return type="Array">
			</return>
			<description>
				Returns an array containing the line number of each bookmark.
			</description>
		</method>
		<method name="get_breakpoint_gutter_width" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Gets the breakpoint's gutter width.
			</description>
		</method>
		<method name="get_breakpoints" qualifiers="const">
			<return type="Array">
			</return>
			<description>
				Returns an array containing the line number of each breakpoint.
			</description>
		</method>
		<method name="get_cursor_shape_at_position" qualifiers="const">
			<return type="int" enum="Control.CursorShape">
			</return>
			<argument index="0" name="position" type="Vector2">
			</argument>
			<description>
				Returns the [code]CursorShape[/code] at the selected [code]position[/code].
			</description>
		</method>
		<method name="get_fold_gutter_width" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Gets the fold's gutter width.
			</description>
		</method>
		<method name="get_folded_lines" qualifiers="const">
			<return type="PoolIntArray">
			</return>
			<description>
				Returns an array containing the line number of each folded line.
			</description>
		</method>
		<method name="get_indent_level" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns the indent level at [code]line[/code].
			</description>
		</method>
		<method name="get_info_gutter_width" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Gets the info's gutter width.
			</description>
		</method>
		<method name="get_keyword_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="keyword" type="String">
			</argument>
			<description>
				Returns the [Color] of the specified [code]keyword[/code].
			</description>
		</method>
		<method name="get_line" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns the text of a specific line.
			</description>
		</method>
		<method name="get_line_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the amount of total lines in the text.
			</description>
		</method>
		<method name="get_member_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="member" type="String">
			</argument>
			<description>
				Returns the [Color] of the [code]member[/code].
			</description>
		</method>
		<method name="get_menu" qualifiers="const">
			<return type="PopupMenu">
			</return>
			<description>
				Returns the [PopupMenu] of this [TextEdit]. By default, this menu is displayed when right-clicking on the [TextEdit].
			</description>
		</method>
		<method name="get_selection_from_column" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the selection begin column.
			</description>
		</method>
		<method name="get_selection_from_line" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the selection begin line.
			</description>
		</method>
		<method name="get_selection_text" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the text inside the selection.
			</description>
		</method>
		<method name="get_selection_to_column" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the selection end column.
			</description>
		</method>
		<method name="get_selection_to_line" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the selection end line.
			</description>
		</method>
		<method name="get_text_for_completion">
			<return type="String">
			</return>
			<description>
				Returns the text that is being used for completion.
			</description>
		</method>
		<method name="get_text_for_lookup_completion">
			<return type="String">
			</return>
			<description>
				Returns the text that is being used for looking up completion.
			</description>
		</method>
		<method name="get_word_at_position" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="position" type="Vector2">
			</argument>
			<description>
				Returns the word at the selected [code]position[/code].
			</description>
		</method>
		<method name="get_word_under_cursor" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns a [String] text with the word under the mouse cursor location.
			</description>
		</method>
		<method name="has_keyword_color" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="keyword" type="String">
			</argument>
			<description>
				Returns whether the specified [code]keyword[/code] has a color set to it or not.
			</description>
		</method>
		<method name="has_member_color" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="member" type="String">
			</argument>
			<description>
				Returns true if the [code]member[/code] exists.
			</description>
		</method>
		<method name="indent_left">
			<return type="void">
			</return>
			<description>
				Indents left.
			</description>
		</method>
		<method name="indent_right">
			<return type="void">
			</return>
			<description>
				Indents right.
			</description>
		</method>
		<method name="insert_text_at_cursor">
			<return type="void">
			</return>
			<argument index="0" name="text" type="String">
			</argument>
			<description>
				Inserts the specified text at the cursor position.
			</description>
		</method>
		<method name="insert_text_at_line">
			<return type="void">
			</return>
			<argument index="0" name="text" type="String">
			</argument>
			<argument index="1" name="line" type="int">
			</argument>
			<description>
				Inserts the given text at the given line. It doesn't overwrite the line. Use [method set_line] if you want to overwrite the current line's text.
			</description>
		</method>
		<method name="is_folded" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns whether the line at the specified index is folded or not.
			</description>
		</method>
		<method name="is_insert_mode" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns if insert mode is enabled.
			</description>
		</method>
		<method name="is_line_comment" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns if the given line is a comment. Line comments start with [code]#[/code] or [code]//[/code]
			</description>
		</method>
		<method name="is_line_hidden" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns whether the line at the specified index is hidden or not.
			</description>
		</method>
		<method name="is_line_set_as_bookmark" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns if the given line is set as a bookmark.
			</description>
		</method>
		<method name="is_line_set_as_breakpoint" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns if the given line is set as a breakpoint.
			</description>
		</method>
		<method name="is_line_set_as_marked" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns if the given line is set as marked.
			</description>
		</method>
		<method name="is_line_set_as_safe" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Returns if the given line is set as safe.
			</description>
		</method>
		<method name="is_selection_active" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the selection is active.
			</description>
		</method>
		<method name="menu_option">
			<return type="void">
			</return>
			<argument index="0" name="option" type="int">
			</argument>
			<description>
				Triggers a right click menu action by the specified index. See [enum MenuItems] for a list of available indexes.
			</description>
		</method>
		<method name="paste">
			<return type="void">
			</return>
			<description>
				Paste the current selection.
			</description>
		</method>
		<method name="query_code_completion">
			<return type="void">
			</return>
			<description>
				Checks if code completion is possible and queries it by emitting the signal [signal completion_requested].
			</description>
		</method>
		<method name="redo">
			<return type="void">
			</return>
			<description>
				Performs a redo operation.
			</description>
		</method>
		<method name="remove_breakpoints">
			<return type="void">
			</return>
			<description>
				Removes all the breakpoints (without firing "breakpoint_toggled" signal).
			</description>
		</method>
		<method name="search" qualifiers="const">
			<return type="PoolIntArray">
			</return>
			<argument index="0" name="key" type="String">
			</argument>
			<argument index="1" name="flags" type="int">
			</argument>
			<argument index="2" name="from_line" type="int">
			</argument>
			<argument index="3" name="from_column" type="int">
			</argument>
			<description>
				Performs a search inside the text. Search flags can be specified with the SEARCH_* enum.
			</description>
		</method>
		<method name="select">
			<return type="void">
			</return>
			<argument index="0" name="from_line" type="int">
			</argument>
			<argument index="1" name="from_column" type="int">
			</argument>
			<argument index="2" name="to_line" type="int">
			</argument>
			<argument index="3" name="to_column" type="int">
			</argument>
			<description>
				Performs a selection, from line/column to line/column.
			</description>
		</method>
		<method name="select_all">
			<return type="void">
			</return>
			<description>
				Selects all the text.
			</description>
		</method>
		<method name="set_callhints_settings">
			<return type="void">
			</return>
			<argument index="0" name="below" type="bool">
			</argument>
			<argument index="1" name="offset" type="Vector2">
			</argument>
			<description>
				Sets the callhints settings.
			</description>
		</method>
		<method name="set_code_hint">
			<return type="void">
			</return>
			<argument index="0" name="hint" type="String">
			</argument>
			<description>
				Sets the code hint text that will be shown.
			</description>
		</method>
		<method name="set_completion">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<argument index="1" name="prefixes" type="PoolStringArray">
			</argument>
			<description>
				Toggles code completion. The list of prefixes will be used to know when code completion is possible.
			</description>
		</method>
		<method name="set_executing_line">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Sets the given line as the executing line.
			</description>
		</method>
		<method name="set_insert_mode">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Toggles insert mode.
			</description>
		</method>
		<method name="set_line">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<argument index="1" name="text" type="String">
			</argument>
			<description>
				Sets the given text as the given line. It overwrites the content of the given line. Use [method insert_text_at_line] if you want to insert the text without overwriting it.
			</description>
		</method>
		<method name="set_line_as_bookmark">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<argument index="1" name="enabled" type="bool">
			</argument>
			<description>
				Toogles the given line as a bookmark.
			</description>
		</method>
		<method name="set_line_as_breakpoint">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<argument index="1" name="enabled" type="bool">
			</argument>
			<description>
				Toogles the given line as a breakpoint.
			</description>
		</method>
		<method name="set_line_as_hidden">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
				If [code]true[/code], hides the line of the specified index.
			</description>
		</method>
		<method name="set_line_as_marked">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<argument index="1" name="enabled" type="bool">
			</argument>
			<description>
				Toogles the given line as marked.
			</description>
		</method>
		<method name="set_line_as_safe">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<argument index="1" name="enabled" type="bool">
			</argument>
			<description>
				Toogles the given line as safe.
			</description>
		</method>
		<method name="set_line_info_icon">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<argument index="1" name="icon" type="Texture">
			</argument>
			<argument index="2" name="info" type="String">
			</argument>
			<description>
				Sets the info texture and text to the given line.
			</description>
		</method>
		<method name="set_tooltip_request_func">
			<return type="void">
			</return>
			<argument index="0" name="target" type="Object">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<argument index="2" name="extra_data" type="Variant">
			</argument>
			<description>
			</description>
		</method>
		<method name="swap_lines">
			<return type="void">
			</return>
			<argument index="0" name="line_a" type="int">
			</argument>
			<argument index="1" name="line_b" type="int">
			</argument>
			<description>
				Swaps both lines.
			</description>
		</method>
		<method name="toggle_fold_line">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Toggles the folding of the code block at the given line.
			</description>
		</method>
		<method name="undo">
			<return type="void">
			</return>
			<description>
				Performs an undo operation.
			</description>
		</method>
		<method name="unfold_line">
			<return type="void">
			</return>
			<argument index="0" name="line" type="int">
			</argument>
			<description>
				Unfolds the given line, if folded.
			</description>
		</method>
		<method name="unhide_all_lines">
			<return type="void">
			</return>
			<description>
				Unhide all lines that were previously set to hidden by [member set_line_as_hidden].
			</description>
		</method>
	</methods>
	<members>
		<member name="auto_brace_completion" type="bool" setter="set_auto_brace_completion" getter="is_auto_brace_completion_enabled">
			If [code]true[/code], auto brace completion will be enabled.
		</member>
		<member name="auto_indent" type="bool" setter="set_auto_indent" getter="is_auto_indent_enabled">
			If [code]true[/code], auto indent will be enabled.
		</member>
		<member name="bookmark_gutter" type="bool" setter="set_bookmark_gutter_enabled" getter="is_bookmark_gutter_enabled">
			If [code]true[/code], the bookmark gutter will be visible.
		</member>
		<member name="brace_matching" type="bool" setter="set_brace_matching" getter="is_brace_matching_enabled">
			If [code]true[/code], matching braces will be highlighted.
		</member>
		<member name="breakpoint_gutter" type="bool" setter="set_breakpoint_gutter_enabled" getter="is_breakpoint_gutter_enabled">
			If [code]true[/code], the breakpoint gutter will be visible.
		</member>
		<member name="caret_blink" type="bool" setter="cursor_set_blink_enabled" getter="cursor_get_blink_enabled">
			If [code]true[/code], the caret (visual cursor) blinks.
		</member>
		<member name="caret_blink_speed" type="float" setter="cursor_set_blink_speed" getter="cursor_get_blink_speed">
			Duration (in seconds) of a caret's blinking cycle.
		</member>
		<member name="caret_block_mode" type="bool" setter="cursor_set_block_mode" getter="cursor_is_block_mode">
			If [code]true[/code], the caret displays as a rectangle.
			If [code]false[/code], the caret displays as a bar.
		</member>
		<member name="caret_moving_by_right_click" type="bool" setter="set_right_click_moves_caret" getter="is_right_click_moving_caret">
			If [code]true[/code], a right click moves the cursor at the mouse position before displaying the context menu.
			If [code]false[/code], the context menu disregards mouse location.
		</member>
		<member name="context_menu_enabled" type="bool" setter="set_context_menu_enabled" getter="is_context_menu_enabled">
			If [code]true[/code], a right click displays the context menu.
		</member>
		<member name="draw_spaces" type="bool" setter="set_draw_spaces" getter="is_drawing_spaces">
			If [code]true[/code], the "space" character will have a visible representation.
		</member>
		<member name="draw_tabs" type="bool" setter="set_draw_tabs" getter="is_drawing_tabs">
			If [code]true[/code], the "tab" character will have a visible representation.
		</member>
		<member name="fold_gutter" type="bool" setter="set_draw_fold_gutter" getter="is_drawing_fold_gutter">
			If [code]true[/code], the fold gutter is visible. This enables folding groups of indented lines.
		</member>
		<member name="guideline_column" type="int" setter="set_line_length_guideline_column" getter="get_line_length_guideline_column">
			Sets the guideline column.
		</member>
		<member name="h_scroll" type="int" setter="set_h_scroll" getter="get_h_scroll">
			Sets the horizontal scroll.
		</member>
		<member name="hiding_enabled" type="bool" setter="set_hiding_enabled" getter="is_hiding_enabled">
			If [code]true[/code], all lines that have been set to hidden by [member set_line_as_hidden], will not be visible.
		</member>
		<member name="highlight_all_occurrences" type="bool" setter="set_highlight_all_occurrences" getter="is_highlight_all_occurrences_enabled">
			If [code]true[/code], all occurrences of the selected text will be highlighted.
		</member>
		<member name="highlight_current_line" type="bool" setter="set_highlight_current_line" getter="is_highlight_current_line_enabled">
			If [code]true[/code], the line containing the cursor is highlighted.
		</member>
		<member name="indent_size" type="int" setter="set_indent_size" getter="get_indent_size">
			Sets the indent size.
		</member>
		<member name="indent_using_spaces" type="bool" setter="set_indent_using_spaces" getter="is_indent_using_spaces">
			If [code]true[/code], indenting will use spaces.
			If [code]false[/code], indenting will use tabs.
		</member>
		<member name="info_gutter" type="bool" setter="set_draw_info_gutter" getter="is_drawing_info_gutter">
			If [code]true[/code], the info gutter will be visible.
		</member>
		<member name="line_numbers_zero_padded" type="bool" setter="set_line_numbers_zero_padded" getter="is_line_numbers_zero_padded">
			If [code]true[/code], line numbers will be zero padded.
		</member>
		<member name="override_selected_font_color" type="bool" setter="set_override_selected_font_color" getter="is_overriding_selected_font_color">
			Overrides the selected font color with the color set in [code]custom_colors/selection_color[/code].
		</member>
		<member name="readonly" type="bool" setter="set_readonly" getter="is_readonly">
			If [code]true[/code], read-only mode is enabled. Existing text cannot be modified and new text cannot be added.
		</member>
		<member name="scroll_pass_end_of_file" type="bool" setter="set_scroll_pass_end_of_file" getter="is_scroll_pass_end_of_file_enabled">
			If [code]true[/code], scrolling pass the end of the file will be possible.
		</member>
		<member name="select_identifiers_on_hover" type="bool" setter="set_select_identifiers_on_hover" getter="is_selecting_identifiers_on_hover_enabled">
		</member>
		<member name="show_guideline" type="bool" setter="set_show_line_length_guideline" getter="is_showing_line_length_guideline">
			If [code]true[/code], the guideline will be shown.
		</member>
		<member name="show_line_numbers" type="bool" setter="set_show_line_numbers" getter="is_show_line_numbers_enabled">
			If [code]true[/code], line numbers are displayed to the left of the text.
		</member>
		<member name="smooth_scrolling" type="bool" setter="set_smooth_scroll_enable" getter="is_smooth_scroll_enabled">
			If [code]true[/code], sets the [code]step[/code] of the scrollbars to [code]0.25[/code] which results in smoother scrolling.
		</member>
		<member name="syntax_highlighting" type="bool" setter="set_syntax_coloring" getter="is_syntax_coloring_enabled">
			If [code]true[/code], any custom color properties that have been set for this [TextEdit] will be visible.
		</member>
		<member name="text" type="String" setter="set_text" getter="get_text">
			String value of the [TextEdit].
		</member>
		<member name="v_scroll" type="float" setter="set_v_scroll" getter="get_v_scroll">
			Sets the vertical scroll.
		</member>
		<member name="v_scroll_speed" type="float" setter="set_v_scroll_speed" getter="get_v_scroll_speed">
			Vertical scroll sensitivity.
		</member>
		<member name="wrap_enabled" type="bool" setter="set_wrap_enabled" getter="is_wrap_enabled">
			If [code]true[/code], enables text wrapping when it goes beyond the edge of what is visible.
		</member>
	</members>
	<signals>
		<signal name="breakpoint_toggled">
			<argument index="0" name="row" type="int">
			</argument>
			<description>
				Emitted when a breakpoint is placed via the breakpoint gutter.
			</description>
		</signal>
		<signal name="completion_requested">
			<description>
				Emitted when code completion has been requested.
			</description>
		</signal>
		<signal name="cursor_changed">
			<description>
				Emitted when the cursor changes.
			</description>
		</signal>
		<signal name="info_clicked">
			<argument index="0" name="row" type="int">
			</argument>
			<argument index="1" name="info" type="String">
			</argument>
			<description>
				Emitted when the info icon is clicked.
			</description>
		</signal>
		<signal name="symbol_lookup">
			<argument index="0" name="symbol" type="String">
			</argument>
			<argument index="1" name="row" type="int">
			</argument>
			<argument index="2" name="column" type="int">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="text_changed">
			<description>
				Emitted when the text changes.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="SEARCH_MATCH_CASE" value="1" enum="SearchFlags">
			Match case when searching.
		</constant>
		<constant name="SEARCH_WHOLE_WORDS" value="2" enum="SearchFlags">
			Match whole words when searching.
		</constant>
		<constant name="SEARCH_BACKWARDS" value="4" enum="SearchFlags">
			Search from end to beginning.
		</constant>
		<constant name="MENU_CUT" value="0" enum="MenuItems">
			Cuts (Copies and clears) the selected text.
		</constant>
		<constant name="MENU_COPY" value="1" enum="MenuItems">
			Copies the selected text.
		</constant>
		<constant name="MENU_PASTE" value="2" enum="MenuItems">
			Pastes the clipboard text over the selected text (or at the cursor's position).
		</constant>
		<constant name="MENU_CLEAR" value="3" enum="MenuItems">
			Erases the whole [TextEdit] text.
		</constant>
		<constant name="MENU_SELECT_ALL" value="4" enum="MenuItems">
			Selects the whole [TextEdit] text.
		</constant>
		<constant name="MENU_UNDO" value="5" enum="MenuItems">
			Undoes the current action.
		</constant>
		<constant name="MENU_REDO" value="6" enum="MenuItems">
			Redoes the previous action.
		</constant>
		<constant name="MENU_MAX" value="7" enum="MenuItems">
			Represents the size of the [enum MenuItems] enum.
		</constant>
	</constants>
	<theme_items>
		<theme_item name="background_color" type="Color">
			Sets the background [Color] of this [TextEdit]. [member syntax_highlighting] has to be enabled.
		</theme_item>
		<theme_item name="bookmark_color" type="Color">
			Sets the [Color] of the bookmark marker. [member syntax_highlighting] has to be enabled.
		</theme_item>
		<theme_item name="brace_mismatch_color" type="Color">
		</theme_item>
		<theme_item name="breakpoint_color" type="Color">
			Sets the [Color] of the breakpoints. [member breakpoint_gutter] has to be enabled.
		</theme_item>
		<theme_item name="caret_background_color" type="Color">
		</theme_item>
		<theme_item name="caret_color" type="Color">
		</theme_item>
		<theme_item name="code_folding_color" type="Color">
		</theme_item>
		<theme_item name="completion" type="StyleBox">
		</theme_item>
		<theme_item name="completion_background_color" type="Color">
		</theme_item>
		<theme_item name="completion_existing_color" type="Color">
		</theme_item>
		<theme_item name="completion_font_color" type="Color">
		</theme_item>
		<theme_item name="completion_lines" type="int">
		</theme_item>
		<theme_item name="completion_max_width" type="int">
		</theme_item>
		<theme_item name="completion_scroll_color" type="Color">
		</theme_item>
		<theme_item name="completion_scroll_width" type="int">
		</theme_item>
		<theme_item name="completion_selected_color" type="Color">
		</theme_item>
		<theme_item name="current_line_color" type="Color">
			Sets the current line highlight [Color]. [member highlight_current_line] has to be enabled.
		</theme_item>
		<theme_item name="executing_line_color" type="Color">
		</theme_item>
		<theme_item name="focus" type="StyleBox">
		</theme_item>
		<theme_item name="fold" type="Texture">
		</theme_item>
		<theme_item name="folded" type="Texture">
		</theme_item>
		<theme_item name="font" type="Font">
			Sets the default [Font].
		</theme_item>
		<theme_item name="font_color" type="Color">
			Sets the font [Color].
		</theme_item>
		<theme_item name="font_color_selected" type="Color">
		</theme_item>
		<theme_item name="function_color" type="Color">
		</theme_item>
		<theme_item name="line_number_color" type="Color">
			Sets the [Color] of the line numbers. [member show_line_numbers] has to be enabled.
		</theme_item>
		<theme_item name="line_spacing" type="int">
			Sets the spacing between the lines.
		</theme_item>
		<theme_item name="mark_color" type="Color">
			Sets the [Color] of marked text.
		</theme_item>
		<theme_item name="member_variable_color" type="Color">
		</theme_item>
		<theme_item name="normal" type="StyleBox">
			Sets the [StyleBox] of this [TextEdit].
		</theme_item>
		<theme_item name="number_color" type="Color">
		</theme_item>
		<theme_item name="read_only" type="StyleBox">
			Sets the [StyleBox] of this [TextEdit] when [member read_only] is enabled.
		</theme_item>
		<theme_item name="safe_line_number_color" type="Color">
		</theme_item>
		<theme_item name="selection_color" type="Color">
			Sets the highlight [Color] of text selections.
		</theme_item>
		<theme_item name="space" type="Texture">
		</theme_item>
		<theme_item name="symbol_color" type="Color">
		</theme_item>
		<theme_item name="tab" type="Texture">
			Sets a custom [Texture] for tab text characters.
		</theme_item>
		<theme_item name="word_highlighted_color" type="Color">
			Sets the highlight [Color] of multiple occurrences. [member highlight_all_occurrences] has to be enabled.
		</theme_item>
	</theme_items>
</class>
