<?xml version="1.0" encoding="UTF-8" ?>
<class name="ComputePanoramaSkyMaterial" inherits="PanoramaSkyCommonMaterial" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A [Material] used with [Sky] to draw a background panorama texture which is precomputed.
	</brief_description>
	<description>
		This class is differs from [PanoramaSkyMaterial] in that it uses [RID] instead of [Texture2D] to set the panorama texture which resides on GPU.
		One need to generate panorama using GLSL compute shader first, then use
		[code]
		# copy the panorama from image2D output of a compute shader to a texture2D which is owned by RenderingServer.
		panorama_rid=RenderingServer.texture_rd_create(compute_panorama_rid)
		# set the panorama to this sky material
		WorldEnvironment.Environment.sky.sky_material.set_panorama(panorama_rid)
		[/code]

		This class utilizes the mechanism first introduced in following PR:[https://github.com/godotengine/godot/pull/79288].
		This [Material] can not be converted to shader as there is no sense to do so. No plugins implemented.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_panorama" qualifiers="const">
			<return type="RID" />
			<description>
			</description>
		</method>
		<method name="get_panorama_size" qualifiers="const">
			<return type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="set_panorama">
			<return type="void" />
			<param index="0" name="RID" type="RID" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="filter" type="bool" setter="set_filtering_enabled" getter="is_filtering_enabled" default="true">
			Inherited from [PanoramaSkyCommonMaterial].
		</member>
		<member name="panorama_scale" type="int" setter="set_panorama_scale" getter="get_panorama_scale" enum="ComputePanoramaSkyMaterial.PanoramaScale" default="1">
		</member>
	</members>
	<constants>
		<constant name="DOUBLE_SIZE" value="0" enum="PanoramaScale">
		</constant>
		<constant name="FULL_SIZE" value="1" enum="PanoramaScale">
		</constant>
		<constant name="HALF_SIZE" value="2" enum="PanoramaScale">
		</constant>
		<constant name="QUARTER_SIZE" value="3" enum="PanoramaScale">
		</constant>
	</constants>
</class>
