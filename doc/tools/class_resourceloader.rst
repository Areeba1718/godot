:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the ResourceLoader.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ResourceLoader:

ResourceLoader
==============

**Inherits:** 

Singleton used to load resource files.

Description
-----------

Singleton used to load resource files from the filesystem.

It uses the many ResourceFormatLoader classes registered in the engine (either built-in or from a plugin) to load files into memory and convert them to a format that can be used by the engine.

GDScript has a simplified :ref:`@GDScript.load<class_@GDScript_load>` built-in method which can be used in most situations, leaving the use of ``ResourceLoader`` for more advanced scenarios.

Methods
-------

+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| bool                      | :ref:`exists<class_ResourceLoader_method_exists>` **(** String path, String type_hint="" **)**                                    |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| PackedStringArray         | :ref:`get_dependencies<class_ResourceLoader_method_get_dependencies>` **(** String path **)**                                     |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| PackedStringArray         | :ref:`get_recognized_extensions_for_type<class_ResourceLoader_method_get_recognized_extensions_for_type>` **(** String type **)** |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| bool                      | :ref:`has_cached<class_ResourceLoader_method_has_cached>` **(** String path **)**                                                 |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Resource                  | :ref:`load<class_ResourceLoader_method_load>` **(** String path, String type_hint="", bool no_cache=false **)**                   |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| ResourceInteractiveLoader | :ref:`load_interactive<class_ResourceLoader_method_load_interactive>` **(** String path, String type_hint="" **)**                |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`set_abort_on_missing_resources<class_ResourceLoader_method_set_abort_on_missing_resources>` **(** bool abort **)**          |
+---------------------------+-----------------------------------------------------------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_ResourceLoader_method_exists:

- bool **exists** **(** String path, String type_hint="" **)**

Returns whether a recognized resource exists for the given ``path``.

An optional ``type_hint`` can be used to further specify the Resource type that should be handled by the ResourceFormatLoader.

----

.. _class_ResourceLoader_method_get_dependencies:

- PackedStringArray **get_dependencies** **(** String path **)**

Returns the dependencies for the resource at the given ``path``.

----

.. _class_ResourceLoader_method_get_recognized_extensions_for_type:

- PackedStringArray **get_recognized_extensions_for_type** **(** String type **)**

Returns the list of recognized extensions for a resource type.

----

.. _class_ResourceLoader_method_has_cached:

- bool **has_cached** **(** String path **)**

Returns whether a cached resource is available for the given ``path``.

Once a resource has been loaded by the engine, it is cached in memory for faster access, and future calls to the :ref:`load<class_ResourceLoader_method_load>` or :ref:`load_interactive<class_ResourceLoader_method_load_interactive>` methods will use the cached version. The cached resource can be overridden by using :ref:`Resource.take_over_path<class_Resource_take_over_path>` on a new resource for that same path.

----

.. _class_ResourceLoader_method_load:

- Resource **load** **(** String path, String type_hint="", bool no_cache=false **)**

Loads a resource at the given ``path``, caching the result for further access.

The registered ResourceFormatLoader\ s are queried sequentially to find the first one which can handle the file's extension, and then attempt loading. If loading fails, the remaining ResourceFormatLoaders are also attempted.

An optional ``type_hint`` can be used to further specify the Resource type that should be handled by the ResourceFormatLoader.

If ``no_cache`` is ``true``, the resource cache will be bypassed and the resource will be loaded anew. Otherwise, the cached resource will be returned if it exists.

Returns an empty resource if no ResourceFormatLoader could handle the file.

----

.. _class_ResourceLoader_method_load_interactive:

- ResourceInteractiveLoader **load_interactive** **(** String path, String type_hint="" **)**

Starts loading a resource interactively. The returned ResourceInteractiveLoader object allows to load with high granularity, calling its :ref:`ResourceInteractiveLoader.poll<class_ResourceInteractiveLoader_poll>` method successively to load chunks.

An optional ``type_hint`` can be used to further specify the Resource type that should be handled by the ResourceFormatLoader.

----

.. _class_ResourceLoader_method_set_abort_on_missing_resources:

- void **set_abort_on_missing_resources** **(** bool abort **)**

Changes the behavior on missing sub-resources. The default behavior is to abort loading.

